version: '3.8'

services:
  db:
    image: postgres:15 # Используйте нужную вам версию PostgreSQL
    volumes:
      - postgres_data:/var/lib/postgresql/data/ # Сохранение данных БД
    environment:
      - POSTGRES_DB=${SQL_DATABASE}
      - POSTGRES_USER=${SQL_USER}
      - POSTGRES_PASSWORD=${SQL_PASSWORD}
    expose:
      - "5432" # Порт доступен только внутри сети Docker
    healthcheck: # Проверка готовности БД (опционально, но полезно)
        test: ["CMD-SHELL", "pg_isready -U ${SQL_USER} -d ${SQL_DATABASE}"]
        interval: 5s
        timeout: 5s
        retries: 5

  app:
    build: .
    # --- ИЗМЕНЕНО: Запускаем Gunicorn для веб-части ---
    # Замените your_project_name на имя вашего Django проекта (папка с wsgi.py)
    command: gunicorn your_project_name.wsgi:application --bind 0.0.0.0:8000
    volumes:
      # Том для статики (для Nginx)
      - static_volume:/app/staticfiles
      # Том для медиа (для Nginx и для Django)
      - media_volume:/app/mediafiles
    expose:
      - "8000" # Gunicorn слушает на этом порту внутри контейнера
    env_file:
      - .env # Загружаем переменные из .env
    depends_on:
      db: # Зависит от БД
        condition: service_healthy # Ждем, пока БД будет готова (если есть healthcheck)
        # condition: service_started # Или просто ждем запуска сервиса

  bot:
    build: .
    # --- ИЗМЕНЕНО: Запускаем команду runbot ---
    command: python manage.py runbot
    volumes:
      # Медиа-файлы могут быть нужны боту для отправки фото профиля
      - media_volume:/app/mediafiles
      # Файл состояния бота (если используется PicklePersistence)
      # Убедитесь, что путь совпадает с указанным в runbot.py
      - bot_persistence:/app # Том для файла bot_persistence.pickle
    env_file:
      - .env
    depends_on:
      db: # Бот тоже может зависеть от БД
        condition: service_healthy
        # condition: service_started

  nginx:
    image: nginx:1.25 # Используйте стабильную версию Nginx
    ports:
      - "80:80" # Мапим порт 80 хоста на порт 80 контейнера Nginx
      # - "443:443" # Раскомментируйте и настройте для HTTPS
    volumes:
      - ./nginx.conf:/etc/nginx/conf.d/default.conf # Конфигурация Nginx
      - static_volume:/usr/share/nginx/html/static # Отдаем статику через Nginx
      - media_volume:/usr/share/nginx/html/media   # Отдаем медиа через Nginx
      # - ./certs:/etc/nginx/certs # Раскомментируйте для HTTPS сертификатов
    depends_on:
      - app # Nginx зависит от Django/Gunicorn

volumes:
  postgres_data: # Том для данных PostgreSQL
  static_volume: # Том для статических файлов Django
  media_volume:  # Том для загруженных медиа-файлов
  bot_persistence: # Том для файла состояния бота