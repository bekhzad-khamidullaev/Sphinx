# hrbot/signals.py

import logging
import requests
import json

from django.conf import settings
from django.db.models.signals import post_save
from django.dispatch import receiver
from django.utils.translation import gettext as _  # —É–∂–µ –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç str
from telegram import InlineKeyboardButton, InlineKeyboardMarkup
from telegram.constants import ParseMode

from .models import TelegramUser

logger = logging.getLogger(__name__)


def send_telegram_message_sync(chat_id, text, reply_markup=None, parse_mode=None):
    """
    –°–∏–Ω—Ö—Ä–æ–Ω–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ —á–µ—Ä–µ–∑ Telegram Bot API —Å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ–º requests.
    """
    token = getattr(settings, 'TELEGRAM_BOT_TOKEN', None)
    if not token:
        logger.error("TELEGRAM_BOT_TOKEN not found in settings. Cannot send message.")
        return False

    api_url = f"https://api.telegram.org/bot{token}/sendMessage"
    payload = {
        'chat_id': chat_id,
        'text': text,
    }
    if reply_markup:
        # –ó–¥–µ—Å—å –ø–µ—Ä–µ–¥–∞–µ–º —É–∂–µ –≥–æ—Ç–æ–≤—ã–π —Å–ª–æ–≤–∞—Ä—å, requests —Å–∞–º —Å–¥–µ–ª–∞–µ—Ç JSON-encode
        payload['reply_markup'] = reply_markup.to_dict()
    if parse_mode:
        payload['parse_mode'] = parse_mode

    headers = {'Content-Type': 'application/json; charset=utf-8'}
    try:
        # –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º –≤ JSON-—Å—Ç—Ä–æ–∫—É, —á—Ç–æ–±—ã –≥–∞—Ä–∞–Ω—Ç–∏—Ä–æ–≤–∞—Ç—å utf-8
        data = json.dumps(payload, ensure_ascii=False).encode('utf-8')
        response = requests.post(api_url, data=data, headers=headers, timeout=10)
        response.raise_for_status()
        result = response.json()
        if result.get('ok'):
            logger.info(f"Successfully sent message to chat_id {chat_id}")
            return True
        else:
            logger.error(f"Telegram API error sending to {chat_id}: {result.get('description')}")
            return False
    except requests.Timeout:
        logger.warning(f"Timeout sending Telegram message to {chat_id}")
        return False
    except requests.RequestException as e:
        logger.error(f"HTTP request error sending message to {chat_id}: {e}")
        return False
    except Exception as e:
        logger.exception(f"Unexpected error sending message to {chat_id}: {e}")
        return False


@receiver(post_save, sender=TelegramUser)
def notify_user_on_approval(sender, instance, created, **kwargs):
    """
    –û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é –ø—Ä–∏ –ø–µ—Ä–≤–æ–º –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–∏ –µ–≥–æ –∞–∫–∫–∞—É–Ω—Ç–∞.
    """
    # –ï—Å–ª–∏ —Ç–æ–ª—å–∫–æ —Å–æ–∑–¥–∞–Ω, –∏–ª–∏ –Ω–µ approved, –∏–ª–∏ —É–∂–µ —É–≤–µ–¥–æ–º–ª—è–ª–∏ ‚Äî –ø—Ä–æ–ø—É—Å–∫–∞–µ–º
    if created or not instance.approved or instance.notified_on_approval:
        return

    logger.info(f"TelegramUser {instance.telegram_id} approved. Sending notification.")

    # 1) –°–æ–æ–±—â–∞–µ–º –æ–± –æ–¥–æ–±—Ä–µ–Ω–∏–∏
    approval_text = _("‚úÖ –í–∞—à –∞–∫–∫–∞—É–Ω—Ç –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω! –¢–µ–ø–µ—Ä—å –¥–æ—Å—Ç—É–ø–Ω—ã –≤—Å–µ —Ñ—É–Ω–∫—Ü–∏–∏ –±–æ—Ç–∞. –ù–∞–∂–º–∏—Ç–µ –¥–ª—è –ø—Ä–æ–¥–æ–ª–∂–µ–Ω–∏—è /start")
    if not send_telegram_message_sync(
        chat_id=instance.telegram_id,
        text=approval_text
    ):
        logger.error(f"Failed to send approval notification to {instance.telegram_id}.")
        return

    # 2) –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é
    kb_data = [
        [InlineKeyboardButton(_("–ù–∞—á–∞—Ç—å"), callback_data="/start")],
    ]

    # –°–æ–±–∏—Ä–∞–µ–º InlineKeyboardButton
    buttons = [
        [InlineKeyboardButton(item["text"], callback_data=item["callback_data"]) for item in row]
        for row in kb_data
    ]
    menu_text = _("üëã *–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é*\n–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:")

    if not send_telegram_message_sync(
        chat_id=instance.telegram_id,
        text=menu_text,
        reply_markup=InlineKeyboardMarkup(buttons),
        parse_mode=ParseMode.MARKDOWN
    ):
        logger.warning(f"Failed to send main menu to {instance.telegram_id} after approval.")

    # 3) –û—Ç–º–µ—á–∞–µ–º, —á—Ç–æ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ
    try:
        TelegramUser.objects.filter(pk=instance.pk).update(notified_on_approval=True)
        logger.info(f"Marked TelegramUser {instance.telegram_id} as notified.")
    except Exception as e:
        logger.exception(f"Failed to update notified_on_approval for {instance.telegram_id}: {e}")
