# hrbot/management/commands/runbot.py

import os
import django
import logging
import asyncio
from django.core.management.base import BaseCommand
from django.conf import settings
from django.utils.translation import gettext as _
from django.db import models
from telegram import (
    Bot, Update, ReplyKeyboardMarkup, KeyboardButton, InputFile
)
from telegram.ext import (
    ApplicationBuilder,
    CommandHandler,
    MessageHandler,
    ConversationHandler,
    filters,
    ContextTypes,
)
from asgiref.sync import sync_to_async

from hrbot.models import TelegramUser, Evaluation, Question
from hrbot.bitrix import send_evaluation_to_bitrix
from user_profiles.models import User, Department, Role

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è Django
os.environ.setdefault("DJANGO_SETTINGS_MODULE", "config.settings")
django.setup()

logger = logging.getLogger(__name__)

# –°–æ—Å—Ç–æ—è–Ω–∏—è (0‚Äì14)
(
    MAIN_MENU,
    EVAL_DEPT, EVAL_ROLE, EVAL_EMP, EVAL_Q,
    DEPT_LIST, DEPT_EMP_LIST,
    EMP_LIST, EMP_CARD,
    PROFILE_MENU, PROFILE_UPLOAD_PHOTO, PROFILE_SET_NAME,
    LANG_MENU,
    SEARCH_INPUT, SEARCH_RESULTS
) = range(15)

# –ê—Å–∏–Ω—Ö—Ä–æ–Ω–Ω—ã–µ –æ–±—ë—Ä—Ç–∫–∏ ORM
@sync_to_async
def get_or_create_tguser(tg_id: str) -> TelegramUser:
    user, _ = User.objects.get_or_create(username=f"user_{tg_id}")
    tg, _ = TelegramUser.objects.get_or_create(user=user, telegram_id=tg_id)
    return tg

@sync_to_async
def all_departments():
    return list(Department.objects.all())

@sync_to_async
def all_roles():
    return list(Role.objects.all())

@sync_to_async
def users_in_dept(dept_id):
    return list(User.objects.filter(department_id=dept_id))

@sync_to_async
def all_users():
    return list(User.objects.all())

@sync_to_async
def get_questions(role_id):
    return list(Question.objects.filter(role_id=role_id).order_by("order"))

@sync_to_async
def save_eval(ev_data):
    ev = Evaluation.objects.create(**ev_data)
    send_evaluation_to_bitrix(ev)

@sync_to_async
def search_users(q):
    return list(
        User.objects.filter(
            models.Q(first_name__icontains=q)
            | models.Q(last_name__icontains=q)
            | models.Q(phone_number__icontains=q)
            | models.Q(email__icontains=q)
        )
    )

@sync_to_async
def update_user_name(user, name):
    user.first_name = name
    user.save()

@sync_to_async
def update_user_image(user, image_path):
    user.image = image_path
    user.save()

@sync_to_async
def fetch_user_by_id(user_id):
    return User.objects.get(id=user_id)

@sync_to_async
def set_user_setting(user, key, value):
    user.set_setting(key, value)

# /start –∏ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é
async def start(update: Update, ctx: ContextTypes.DEFAULT_TYPE):
    tg = await get_or_create_tguser(str(update.effective_user.id))
    if not tg.approved:
        return await update.message.reply_text(_("‚è≥ –û–∂–∏–¥–∞–π—Ç–µ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è HR"))
    kb = [
        [KeyboardButton(_("–ù–æ–≤–∞—è –æ—Ü–µ–Ω–∫–∞"))],
        [KeyboardButton(_("–°–ø–∏—Å–æ–∫ –æ—Ç–¥–µ–ª–æ–≤")), KeyboardButton(_("–°–ø–∏—Å–æ–∫ —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–æ–≤"))],
        [KeyboardButton(_("–ù–∞—Å—Ç—Ä–æ–π–∫–∏ –ø—Ä–æ—Ñ–∏–ª—è")), KeyboardButton(_("–í—ã–±–æ—Ä —è–∑—ã–∫–∞"))],
        [KeyboardButton(_("–ü–æ–∏—Å–∫ —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∞"))],
        [KeyboardButton("/stop")],
    ]
    await update.message.reply_text(
        _("üëã –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é"),
        reply_markup=ReplyKeyboardMarkup(kb, resize_keyboard=True),
    )
    return MAIN_MENU

# –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é
async def main_menu(update: Update, ctx: ContextTypes.DEFAULT_TYPE):
    text = update.message.text
    if text == _("–ù–æ–≤–∞—è –æ—Ü–µ–Ω–∫–∞"):
        deps = await all_departments()
        ctx.user_data["eval_deps"] = {d.name: d.id for d in deps}
        kb = [[KeyboardButton(d)] for d in ctx.user_data["eval_deps"]] + [[KeyboardButton(_("–ù–∞–∑–∞–¥"))]]
        await update.message.reply_text(
            _("üè¢ –í—ã–±–µ—Ä–∏—Ç–µ –æ—Ç–¥–µ–ª –¥–ª—è –æ—Ü–µ–Ω–∫–∏:"),
            reply_markup=ReplyKeyboardMarkup(kb, resize_keyboard=True),
        )
        return EVAL_DEPT

    if text == _("–°–ø–∏—Å–æ–∫ –æ—Ç–¥–µ–ª–æ–≤"):
        deps = await all_departments()
        ctx.user_data["dept_list"] = {d.name: d.id for d in deps}
        kb = [[KeyboardButton(d)] for d in ctx.user_data["dept_list"]] + [[KeyboardButton(_("–ù–∞–∑–∞–¥"))]]
        await update.message.reply_text(
            _("üìã –û—Ç–¥–µ–ª—ã –∫–æ–º–ø–∞–Ω–∏–∏:"),
            reply_markup=ReplyKeyboardMarkup(kb, resize_keyboard=True),
        )
        return DEPT_LIST

    if text == _("–°–ø–∏—Å–æ–∫ —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–æ–≤"):
        users = await all_users()
        ctx.user_data["all_users"] = {u.get_full_name(): u.id for u in users}
        kb = [[KeyboardButton(n)] for n in ctx.user_data["all_users"]] + [[KeyboardButton(_("–ù–∞–∑–∞–¥"))]]
        await update.message.reply_text(
            _("üë• –°–æ—Ç—Ä—É–¥–Ω–∏–∫–∏:"),
            reply_markup=ReplyKeyboardMarkup(kb, resize_keyboard=True),
        )
        return EMP_LIST

    if text == _("–ù–∞—Å—Ç—Ä–æ–π–∫–∏ –ø—Ä–æ—Ñ–∏–ª—è"):
        kb = [
            [KeyboardButton(_("–ó–∞–≥—Ä—É–∑–∏—Ç—å —Ñ–æ—Ç–æ"))],
            [KeyboardButton(_("–ò–∑–º–µ–Ω–∏—Ç—å –∏–º—è"))],
            [KeyboardButton(_("–ù–∞–∑–∞–¥"))],
        ]
        await update.message.reply_text(
            _("‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –ø—Ä–æ—Ñ–∏–ª—è:"),
            reply_markup=ReplyKeyboardMarkup(kb, resize_keyboard=True),
        )
        return PROFILE_MENU

    if text == _("–í—ã–±–æ—Ä —è–∑—ã–∫–∞"):
        kb = [
            [KeyboardButton("–†—É—Å—Å–∫–∏–π"), KeyboardButton("English"), KeyboardButton("O'zbek")],
            [KeyboardButton(_("–ù–∞–∑–∞–¥"))],
        ]
        await update.message.reply_text(
            _("üåê –í—ã–±–µ—Ä–∏—Ç–µ —è–∑—ã–∫:"),
            reply_markup=ReplyKeyboardMarkup(kb, resize_keyboard=True),
        )
        return LANG_MENU

    if text == _("–ü–æ–∏—Å–∫ —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∞"):
        await update.message.reply_text(
            _("üîé –í–≤–µ–¥–∏—Ç–µ –∏–º—è, —Ñ–∞–º–∏–ª–∏—é –∏–ª–∏ —Ç–µ–ª–µ—Ñ–æ–Ω:"),
            reply_markup=ReplyKeyboardMarkup([[KeyboardButton(_("–ù–∞–∑–∞–¥"))]], resize_keyboard=True),
        )
        return SEARCH_INPUT

    if text == "/stop":
        await update.message.reply_text(_("‚úã –û–ø–µ—Ä–∞—Ü–∏—è –ø—Ä–µ—Ä–≤–∞–Ω–∞"))
        return ConversationHandler.END

    await update.message.reply_text(_("‚ùå –ù–µ –∑–Ω–∞—é —Ç–∞–∫–æ–π –∫–æ–º–∞–Ω–¥—ã, –≤—ã–±–µ—Ä–∏—Ç–µ –∏–∑ –º–µ–Ω—é"))
    return MAIN_MENU

# ======== –ù–û–í–ê–Ø –û–¶–ï–ù–ö–ê ========
async def eval_dept(update: Update, ctx):
    if update.message.text == _("–ù–∞–∑–∞–¥"):
        return await start(update, ctx)
    sel = update.message.text
    if sel not in ctx.user_data.get("eval_deps", {}):
        return await update.message.reply_text(_("‚ùå –í—ã–±–µ—Ä–∏—Ç–µ –æ—Ç–¥–µ–ª –∏–∑ —Å–ø–∏—Å–∫–∞"))
    ctx.user_data["eval_dept_id"] = ctx.user_data["eval_deps"][sel]

    roles = await all_roles()
    ctx.user_data["eval_roles"] = {r.name: r.id for r in roles}
    kb = [[KeyboardButton(r)] for r in ctx.user_data["eval_roles"]] + [[KeyboardButton(_("–ù–∞–∑–∞–¥"))]]
    await update.message.reply_text(
        _("üëî –í—ã–±–µ—Ä–∏—Ç–µ –¥–æ–ª–∂–Ω–æ—Å—Ç—å:"),
        reply_markup=ReplyKeyboardMarkup(kb, resize_keyboard=True),
    )
    return EVAL_ROLE

async def eval_role(update: Update, ctx):
    if update.message.text == _("–ù–∞–∑–∞–¥"):
        return await start(update, ctx)
    sel = update.message.text
    if sel not in ctx.user_data.get("eval_roles", {}):
        return await update.message.reply_text(_("‚ùå –í—ã–±–µ—Ä–∏—Ç–µ –¥–æ–ª–∂–Ω–æ—Å—Ç—å –∏–∑ —Å–ø–∏—Å–∫–∞"))
    ctx.user_data["eval_role_id"] = ctx.user_data["eval_roles"][sel]

    users = await users_in_dept(ctx.user_data["eval_dept_id"])
    ctx.user_data["eval_emps"] = {u.get_full_name(): u.id for u in users}
    kb = [[KeyboardButton(n)] for n in ctx.user_data["eval_emps"]] + [[KeyboardButton(_("–ù–∞–∑–∞–¥"))]]
    await update.message.reply_text(
        _("üë§ –í—ã–±–µ—Ä–∏—Ç–µ —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∞:"),
        reply_markup=ReplyKeyboardMarkup(kb, resize_keyboard=True),
    )
    return EVAL_EMP

async def eval_emp(update: Update, ctx):
    if update.message.text == _("–ù–∞–∑–∞–¥"):
        return await eval_dept(update, ctx)
    sel = update.message.text
    if sel not in ctx.user_data.get("eval_emps", {}):
        return await update.message.reply_text(_("‚ùå –í—ã–±–µ—Ä–∏—Ç–µ —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∞ –∏–∑ —Å–ø–∏—Å–∫–∞"))
    ctx.user_data["eval_emp_name"] = sel

    qs = await get_questions(ctx.user_data["eval_role_id"])
    ctx.user_data["eval_qs"] = qs
    ctx.user_data["eval_answers"] = []
    ctx.user_data["eval_idx"] = 0

    await update.message.reply_text(
        qs[0].text,
        reply_markup=ReplyKeyboardMarkup(
            [[KeyboardButton(_("–ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å"))], [KeyboardButton(_("–ù–∞–∑–∞–¥"))]],
            resize_keyboard=True,
        ),
    )
    return EVAL_Q

async def eval_q(update: Update, ctx):
    txt = update.message.text
    idx = ctx.user_data["eval_idx"]
    qs = ctx.user_data["eval_qs"]

    if txt == _("–ù–∞–∑–∞–¥"):
        if idx > 0:
            ctx.user_data["eval_idx"] -= 1
        return await update.message.reply_text(qs[ctx.user_data["eval_idx"]].text)

    if txt != _("–ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å"):
        ctx.user_data["eval_answers"].append(txt)
    else:
        ctx.user_data["eval_answers"].append(None)

    ctx.user_data["eval_idx"] += 1
    if ctx.user_data["eval_idx"] < len(qs):
        return await update.message.reply_text(
            qs[ctx.user_data["eval_idx"]].text,
            reply_markup=ReplyKeyboardMarkup(
                [[KeyboardButton(_("–ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å"))], [KeyboardButton(_("–ù–∞–∑–∞–¥"))]],
                resize_keyboard=True,
            ),
        )

    data = {
        "evaluator_id": (await get_or_create_tguser(str(update.effective_user.id))).id,
        "employee_name": ctx.user_data["eval_emp_name"],
        "role_id": ctx.user_data["eval_role_id"],
        "responses": {q.text: a for q, a in zip(qs, ctx.user_data["eval_answers"])},
    }
    await save_eval(data)

    hr = settings.HR_TELEGRAM_CHAT_ID
    summary = _("üìù –û—Ü–µ–Ω–∫–∞") + f": {ctx.user_data['eval_emp_name']}\n"
    for q, a in zip(qs, ctx.user_data["eval_answers"]):
        summary += f"‚Ä¢ {q.text}: {a or '-'}\n"
    Bot(settings.TELEGRAM_BOT_TOKEN).send_message(chat_id=hr, text=summary)

    await update.message.reply_text(_("‚úÖ –û—Ü–µ–Ω–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∞"))
    return await start(update, ctx)

# ======== –°–ü–ò–°–û–ö –û–¢–î–ï–õ–û–í ========
async def dept_list(update: Update, ctx):
    if update.message.text == _("–ù–∞–∑–∞–¥"):
        return await start(update, ctx)
    depts = ctx.user_data["dept_list"]
    sel = update.message.text
    if sel not in depts:
        return await update.message.reply_text(_("‚ùå –í—ã–±–µ—Ä–∏—Ç–µ –æ—Ç–¥–µ–ª –∏–∑ —Å–ø–∏—Å–∫–∞"))
    dept_id = depts[sel]
    users = await users_in_dept(dept_id)
    ctx.user_data["dept_emps"] = {u.get_full_name(): u for u in users}
    kb = [[KeyboardButton(u.get_full_name())] for u in users] + [[KeyboardButton(_("–ù–∞–∑–∞–¥"))]]
    await update.message.reply_text(
        _("üë• –°–æ—Ç—Ä—É–¥–Ω–∏–∫–∏ –æ—Ç–¥–µ–ª–∞: ") + sel,
        reply_markup=ReplyKeyboardMarkup(kb, resize_keyboard=True),
    )
    return DEPT_EMP_LIST

async def dept_emp_list(update: Update, ctx):
    if update.message.text == _("–ù–∞–∑–∞–¥"):
        return await dept_list(update, ctx)
    name = update.message.text
    emps = ctx.user_data["dept_emps"]
    if name not in emps:
        return await update.message.reply_text(_("‚ùå –í—ã–±–µ—Ä–∏—Ç–µ —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∞"))
    u = emps[name]
    text = (
        f"{u.get_full_name()}\n"
        f"{u.job_title or ''}\n"
        f"üìû {u.phone_number or '-'}\n"
        f"‚úâÔ∏è {u.email or '-'}"
    )
    if u.image:
        with open(u.image.path, "rb") as f:
            await update.message.reply_photo(photo=f, caption=text)
    else:
        await update.message.reply_text(text)
    return DEPT_EMP_LIST

# ======== –°–ü–ò–°–û–ö –í–°–ï–• –°–û–¢–†–£–î–ù–ò–ö–û–í ========
async def emp_list(update: Update, ctx):
    if update.message.text == _("–ù–∞–∑–∞–¥"):
        return await start(update, ctx)
    name = update.message.text
    all_u = ctx.user_data["all_users"]
    if name not in all_u:
        return await update.message.reply_text(_("‚ùå –í—ã–±–µ—Ä–∏—Ç–µ —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∞"))
    u = await fetch_user_by_id(all_u[name])
    text = (
        f"{u.get_full_name()}\n"
        f"{u.job_title or ''}\n"
        f"üìû {u.phone_number or '-'}\n"
        f"‚úâÔ∏è {u.email or '-'}"
    )
    if u.image:
        with open(u.image.path, "rb") as f:
            await update.message.reply_photo(photo=f, caption=text)
    else:
        await update.message.reply_text(text)
    return EMP_LIST

# ======== –ù–ê–°–¢–†–û–ô–ö–ò –ü–†–û–§–ò–õ–Ø ========
async def profile_menu(update: Update, ctx):
    text = update.message.text
    if text == _("–ó–∞–≥—Ä—É–∑–∏—Ç—å —Ñ–æ—Ç–æ"):
        await update.message.reply_text(_("üì∏ –û—Ç–ø—Ä–∞–≤—å—Ç–µ —Å–≤–æ—ë —Ñ–æ—Ç–æ"))
        return PROFILE_UPLOAD_PHOTO
    if text == _("–ò–∑–º–µ–Ω–∏—Ç—å –∏–º—è"):
        await update.message.reply_text(_("‚úçÔ∏è –í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤–æ–µ –∏–º—è"))
        return PROFILE_SET_NAME
    if text == _("–ù–∞–∑–∞–¥"):
        return await start(update, ctx)
    return PROFILE_MENU

async def profile_upload_photo(update: Update, ctx):
    photo = update.message.photo[-1]
    tg = await get_or_create_tguser(str(update.effective_user.id))
    file = await photo.get_file()
    path = os.path.join(settings.MEDIA_ROOT, f"profile_{tg.id}.jpg")
    await file.download_to_drive(path)
    image_path = f"profile_pics/{os.path.basename(path)}"
    await update_user_image(tg.user, image_path)
    await update.message.reply_text(_("‚úÖ –§–æ—Ç–æ –æ–±–Ω–æ–≤–ª–µ–Ω–æ"))
    return PROFILE_MENU

async def profile_set_name(update: Update, ctx):
    new_name = update.message.text.strip()
    tg = await get_or_create_tguser(str(update.effective_user.id))
    await update_user_name(tg.user, new_name)
    await update.message.reply_text(_("‚úÖ –ò–º—è –æ–±–Ω–æ–≤–ª–µ–Ω–æ"))
    return PROFILE_MENU

# ======== –í–´–ë–û–† –Ø–ó–´–ö–ê ========
async def lang_menu(update: Update, ctx):
    text = update.message.text
    code_map = {"–†—É—Å—Å–∫–∏–π": "ru", "English": "en", "O'zbek": "uz"}
    code = code_map.get(text)
    if code:
        tg = await get_or_create_tguser(str(update.effective_user.id))
        await set_user_setting(tg.user, "lang", code)
        await update.message.reply_text(_("‚úÖ –Ø–∑—ã–∫ –∏–∑–º–µ–Ω—ë–Ω"))
    return await start(update, ctx)

# ======== –ü–û–ò–°–ö –°–û–¢–†–£–î–ù–ò–ö–û–í ========
async def search_input(update: Update, ctx):
    if update.message.text == _("–ù–∞–∑–∞–¥"):
        return await start(update, ctx)
    users = await search_users(update.message.text.strip())
    if not users:
        return await update.message.reply_text(_("‚ùå –ù–∏–∫–æ–≥–æ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ"))
    ctx.user_data["search_res"] = {u.get_full_name(): u.id for u in users}
    kb = [[KeyboardButton(n)] for n in ctx.user_data["search_res"]] + [[KeyboardButton(_("–ù–∞–∑–∞–¥"))]]
    await update.message.reply_text(
        _("üîç –†–µ–∑—É–ª—å—Ç–∞—Ç—ã –ø–æ–∏—Å–∫–∞:"),
        reply_markup=ReplyKeyboardMarkup(kb, resize_keyboard=True),
    )
    return SEARCH_RESULTS

async def search_results(update: Update, ctx):
    if update.message.text == _("–ù–∞–∑–∞–¥"):
        return await start(update, ctx)
    name = update.message.text
    res = ctx.user_data["search_res"]
    if name not in res:
        return await update.message.reply_text(_("‚ùå –í—ã–±–µ—Ä–∏—Ç–µ —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∞"))
    u = await fetch_user_by_id(res[name])
    text = (
        f"{u.get_full_name()}\n"
        f"{u.job_title or ''}\n"
        f"üìû {u.phone_number or '-'}\n"
        f"‚úâÔ∏è {u.email or '-'}"
    )
    if u.image:
        with open(u.image.path, "rb") as f:
            await update.message.reply_photo(photo=f, caption=text)
    else:
        await update.message.reply_text(text)
    return SEARCH_RESULTS

# /stop
async def stop(update: Update, ctx: ContextTypes.DEFAULT_TYPE):
    await update.message.reply_text(_("‚úã –û–ø–µ—Ä–∞—Ü–∏—è –ø—Ä–µ—Ä–≤–∞–Ω–∞"))
    return ConversationHandler.END

# –ö–æ–º–∞–Ω–¥–∞ –∑–∞–ø—É—Å–∫–∞
class Command(BaseCommand):
    help = "–ó–∞–ø—É—Å–∫–∞–µ—Ç HR-–±–æ—Ç–∞"

    def handle(self, *args, **opts):
        # —É–¥–∞–ª—è–µ–º webhook –ø–µ—Ä–µ–¥ polling
        asyncio.run(Bot(settings.TELEGRAM_BOT_TOKEN).delete_webhook(drop_pending_updates=True))

        app = ApplicationBuilder().token(settings.TELEGRAM_BOT_TOKEN).build()

        conv = ConversationHandler(
            entry_points=[CommandHandler("start", start)],
            states={
                MAIN_MENU:      [MessageHandler(filters.TEXT & ~filters.COMMAND, main_menu)],
                EVAL_DEPT:      [MessageHandler(filters.TEXT & ~filters.COMMAND, eval_dept)],
                EVAL_ROLE:      [MessageHandler(filters.TEXT & ~filters.COMMAND, eval_role)],
                EVAL_EMP:       [MessageHandler(filters.TEXT & ~filters.COMMAND, eval_emp)],
                EVAL_Q:         [MessageHandler(filters.TEXT & ~filters.COMMAND, eval_q)],
                DEPT_LIST:      [MessageHandler(filters.TEXT & ~filters.COMMAND, dept_list)],
                DEPT_EMP_LIST:  [MessageHandler(filters.TEXT & ~filters.COMMAND, dept_emp_list)],
                EMP_LIST:       [MessageHandler(filters.TEXT & ~filters.COMMAND, emp_list)],
                PROFILE_MENU:         [MessageHandler(filters.TEXT & ~filters.COMMAND, profile_menu)],
                PROFILE_UPLOAD_PHOTO: [MessageHandler(filters.PHOTO, profile_upload_photo)],
                PROFILE_SET_NAME:     [MessageHandler(filters.TEXT & ~filters.COMMAND, profile_set_name)],
                LANG_MENU:            [MessageHandler(filters.TEXT & ~filters.COMMAND, lang_menu)],
                SEARCH_INPUT:         [MessageHandler(filters.TEXT & ~filters.COMMAND, search_input)],
                SEARCH_RESULTS:       [MessageHandler(filters.TEXT & ~filters.COMMAND, search_results)],
            },
            fallbacks=[CommandHandler("stop", stop)],
            allow_reentry=True,
        )

        app.add_handler(conv)
        print("üöÄ –ë–æ—Ç –∑–∞–ø—É—â–µ–Ω")
        app.run_polling()
        print("üõë –ë–æ—Ç –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω")