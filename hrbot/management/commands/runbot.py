# hrbot/management/commands/runbot.py
import logging
# import asyncio # –£–±—Ä–∞–Ω, —Ç.–∫. –Ω–µ –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –Ω–∞–ø—Ä—è–º—É—é
from django.core.management.base import BaseCommand
from django.conf import settings
import os
# –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã–µ –º–æ–¥—É–ª–∏ –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å Telegram API
from telegram.ext import Application, ApplicationBuilder, Defaults, PicklePersistence # –î–æ–±–∞–≤–ª–µ–Ω PicklePersistence
from telegram import Update
from telegram.constants import ParseMode

# –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º —Ñ—É–Ω–∫—Ü–∏—é –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤
try:
    from hrbot.bot.registration import setup_handlers
except ImportError as e:
    # –õ–æ–≥–∏—Ä—É–µ–º –∫—Ä–∏—Ç–∏—á–µ—Å–∫—É—é –æ—à–∏–±–∫—É, –µ—Å–ª–∏ –Ω–µ –º–æ–∂–µ–º –∏–º–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞—Ç—å setup_handlers
    logging.critical(f"Failed to import setup_handlers from hrbot.bot.registration: {e}")
    # –ú–æ–∂–Ω–æ –ª–∏–±–æ –≤—ã–π—Ç–∏, –ª–∏–±–æ –ø—Ä–æ–¥–æ–ª–∂–∏—Ç—å –±–µ–∑ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤ (—á—Ç–æ –±–µ—Å—Å–º—ã—Å–ª–µ–Ω–Ω–æ)
    raise # –ü–µ—Ä–µ–≤—ã–±—Ä–∞—Å—ã–≤–∞–µ–º –∏—Å–∫–ª—é—á–µ–Ω–∏–µ, —á—Ç–æ–±—ã –∫–æ–º–∞–Ω–¥–∞ –∑–∞–≤–µ—Ä—à–∏–ª–∞—Å—å —Å –æ—à–∏–±–∫–æ–π

# –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ
logging.basicConfig(
    level=logging.INFO,
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',
    # encoding='utf-8' # –†–∞—Å–∫–æ–º–º–µ–Ω—Ç–∏—Ä—É–π—Ç–µ –¥–ª—è Windows –∫–æ–Ω—Å–æ–ª–∏
)
# –ü–æ–Ω–∏–∂–∞–µ–º —É—Ä–æ–≤–µ–Ω—å –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è –¥–ª—è –±–∏–±–ª–∏–æ—Ç–µ–∫ http
logging.getLogger("httpx").setLevel(logging.WARNING)
logging.getLogger("httpcore").setLevel(logging.WARNING)

# –õ–æ–≥–≥–µ—Ä –¥–ª—è —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥—ã
logger = logging.getLogger(__name__)

class Command(BaseCommand):
    help = '–ó–∞–ø—É—Å–∫–∞–µ—Ç Telegram –±–æ—Ç–∞ HR Bot'

    def handle(self, *args, **options):
        """–û—Å–Ω–æ–≤–Ω–∞—è –ª–æ–≥–∏–∫–∞ –∫–æ–º–∞–Ω–¥—ã."""
        logger.info("Starting runbot command...")

        token = getattr(settings, 'TELEGRAM_BOT_TOKEN', None)
        if not token:
            logger.critical("TELEGRAM_BOT_TOKEN not found in Django settings!")
            self.stderr.write(self.style.ERROR("TELEGRAM_BOT_TOKEN –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞—Ö Django!"))
            return

        try:
            # --- Persistence (–æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ, –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è —Å–æ—Å—Ç–æ—è–Ω–∏—è –¥–∏–∞–ª–æ–≥–æ–≤) ---
            # –£–∫–∞–∂–∏—Ç–µ –ø—É—Ç—å, –≥–¥–µ –±—É–¥–µ—Ç —Ö—Ä–∞–Ω–∏—Ç—å—Å—è —Ñ–∞–π–ª —Å–æ—Å—Ç–æ—è–Ω–∏—è
            persistence_filepath = os.path.join(settings.BASE_DIR, "bot_persistence.pickle")
            persistence = PicklePersistence(filepath=persistence_filepath)
            logger.info(f"Using persistence file: {persistence_filepath}")
            # ------------------------------------------------------------------

            # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
            defaults = Defaults(parse_mode=ParseMode.MARKDOWN)

            # –°–æ–±–∏—Ä–∞–µ–º –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ
            application = (
                ApplicationBuilder()
                .token(token)
                .defaults(defaults)
                .persistence(persistence) # <-- –ò—Å–ø–æ–ª—å–∑—É–µ–º persistence
                # .concurrent_updates(True) # <-- –û–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ
                .build()
            )

            # –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏
            setup_handlers(application) # –ü–µ—Ä–µ–¥–∞–µ–º application –≤ —Ñ—É–Ω–∫—Ü–∏—é –Ω–∞—Å—Ç—Ä–æ–π–∫–∏

            logger.info("HR Bot application configured. Starting polling...")
            self.stdout.write(self.style.SUCCESS("üöÄ HR-–±–æ—Ç –∑–∞–ø—É—Å–∫–∞–µ—Ç—Å—è..."))

            # –ó–∞–ø—É—Å–∫–∞–µ–º –±–æ—Ç–∞ –≤ —Ä–µ–∂–∏–º–µ –æ–ø—Ä–æ—Å–∞
            # –£–∫–∞–∑—ã–≤–∞–µ–º —Ç–æ–ª—å–∫–æ –Ω—É–∂–Ω—ã–µ —Ç–∏–ø—ã –æ–±–Ω–æ–≤–ª–µ–Ω–∏–π (–æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ)
            allowed_updates = [
                Update.MESSAGE,
                Update.CALLBACK_QUERY,
                # –î–æ–±–∞–≤—å—Ç–µ –¥—Ä—É–≥–∏–µ —Ç–∏–ø—ã, –µ—Å–ª–∏ –æ–Ω–∏ –≤–∞–º –Ω—É–∂–Ω—ã
            ]
            application.run_polling(allowed_updates=allowed_updates)
            # –ò–ª–∏ application.run_polling() –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –≤—Å–µ—Ö —Ç–∏–ø–æ–≤

            # –≠—Ç–æ—Ç –∫–æ–¥ –≤—ã–ø–æ–ª–Ω–∏—Ç—Å—è –ø–æ—Å–ª–µ –æ—Å—Ç–∞–Ω–æ–≤–∫–∏ –±–æ—Ç–∞ (–Ω–∞–ø—Ä–∏–º–µ—Ä, –ø–æ Ctrl+C)
            logger.info("HR Bot polling stopped.")
            self.stdout.write(self.style.SUCCESS("HR-–±–æ—Ç –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω."))

        except ValueError as e:
             logger.critical(f"Configuration error creating Application: {e}")
             self.stderr.write(self.style.ERROR(f"–û—à–∏–±–∫–∞ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏: {e}"))
        except ImportError as e: # –õ–æ–≤–∏–º –æ—à–∏–±–∫—É –∏–º–ø–æ—Ä—Ç–∞ setup_handlers, –µ—Å–ª–∏ –æ–Ω–∞ –Ω–µ –±—ã–ª–∞ –ø–æ–π–º–∞–Ω–∞ –≤—ã—à–µ
             logger.critical(f"Import error during setup: {e}")
             self.stderr.write(self.style.ERROR(f"–û—à–∏–±–∫–∞ –∏–º–ø–æ—Ä—Ç–∞ –ø—Ä–∏ –Ω–∞—Å—Ç—Ä–æ–π–∫–µ: {e}"))
        except Exception as e:
            logger.exception("An unexpected error occurred while running the bot.")
            self.stderr.write(self.style.ERROR(f"–ù–µ–ø—Ä–µ–¥–≤–∏–¥–µ–Ω–Ω–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Ä–∞–±–æ—Ç–µ –±–æ—Ç–∞: {e}"))