# hrbot/bot/handlers/directory.py
import logging
from django.utils.translation import gettext as _
from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup
from telegram.constants import ParseMode
from telegram.error import BadRequest, NetworkError, TimedOut
from telegram.ext import ContextTypes, ConversationHandler

from ..constants import DEPT_LIST, DEPT_EMP_LIST, EMP_LIST, CB_MAIN, CB_DEPT, CB_DEPT_EMP, CB_USER, CB_NOOP
from ..db import all_departments, users_in_dept, fetch_user_by_id
from ..utils import reply_text, edit_message_text, send_user_profile
from .common import start # –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º start –¥–ª—è –≤–æ–∑–≤—Ä–∞—Ç–∞ –≤ –º–µ–Ω—é

logger = logging.getLogger(__name__)

async def dept_cb(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –≤—ã–±–æ—Ä –æ—Ç–¥–µ–ª–∞ –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–æ–≤."""
    if not update.callback_query or not update.callback_query.data: return DEPT_LIST
    cq = update.callback_query; user_id = str(update.effective_user.id)
    logger.info(f"DEPT_LIST callback '{cq.data}' from user {user_id}")
    try:
        try: await cq.answer()
        except BadRequest: pass
        parts = cq.data.split(":", 1)
        if len(parts) != 2 or not parts[1].isdigit(): raise ValueError(f"Invalid callback data format: {cq.data}")
        did = int(parts[1]); context.user_data["current_dept_id"] = did
        dept_name = context.user_data.get("dept_list", {}).get(str(did), f"ID {did}")
        logger.debug(f"User {user_id} selected department {did} ('{dept_name}') for viewing.")
        users = await users_in_dept(did)
        if not users:
            logger.warning(f"No users found in department {did}.")
            await edit_message_text(cq.message, _("‚ùå –í —ç—Ç–æ–º –æ—Ç–¥–µ–ª–µ –Ω–µ—Ç —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–æ–≤."))
            deps = await all_departments()
            if deps:
                 context.user_data["dept_list"] = {str(d.id): d.name for d in deps}
                 buttons = [ [InlineKeyboardButton(name, callback_data=f"{CB_DEPT}:{d_id}")] for d_id, name in list(context.user_data["dept_list"].items())[:15]] + [[InlineKeyboardButton(_("üîô –ù–∞–∑–∞–¥"), callback_data=f"{CB_MAIN}:back_main")]]
                 if len(deps) > 15: buttons.insert(-1, [InlineKeyboardButton(_("... (–µ—â–µ –æ—Ç–¥–µ–ª—ã)"), callback_data=CB_NOOP)])
                 await edit_message_text(cq.message, _("üìã *–û—Ç–¥–µ–ª—ã –∫–æ–º–ø–∞–Ω–∏–∏*"), reply_markup=InlineKeyboardMarkup(buttons), parse_mode=ParseMode.MARKDOWN); return DEPT_LIST
            else: return await start(update, context)
        context.user_data["dept_emps"] = {str(u.id): u for u in users}
        buttons = [ [InlineKeyboardButton(u.get_full_name(), callback_data=f"{CB_DEPT_EMP}:{uid}")] for uid, u in list(context.user_data["dept_emps"].items())[:15] ] + [[InlineKeyboardButton(_("üîô –ù–∞–∑–∞–¥ –∫ –æ—Ç–¥–µ–ª–∞–º"), callback_data=f"{CB_MAIN}:show_depts")]]
        if len(users) > 15: buttons.insert(-1, [InlineKeyboardButton(_("... (–µ—â–µ —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∏)"), callback_data=CB_NOOP)])
        await edit_message_text(cq.message, _("üë• *–°–æ—Ç—Ä—É–¥–Ω–∏–∫–∏ –æ—Ç–¥–µ–ª–∞ '{dept}'*").format(dept=dept_name), reply_markup=InlineKeyboardMarkup(buttons), parse_mode=ParseMode.MARKDOWN)
        return DEPT_EMP_LIST
    except (ValueError, IndexError) as e: logger.warning(f"Invalid callback data in dept_cb: {cq.data} ({e})"); await edit_message_text(cq.message, _("‚ö†Ô∏è –ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –≤—ã–±–æ—Ä –æ—Ç–¥–µ–ª–∞.")); return DEPT_LIST
    except (BadRequest, NetworkError, TimedOut) as e: logger.warning(f"Network/API error in dept_cb: {e}"); await reply_text(update, _("‚ö†Ô∏è –û—à–∏–±–∫–∞ —Å–µ—Ç–∏ –∏–ª–∏ API. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –≤—ã–±—Ä–∞—Ç—å –æ—Ç–¥–µ–ª —Å–Ω–æ–≤–∞.")); return DEPT_LIST
    except Exception as e: logger.exception(f"Unexpected error in dept_cb: {e}"); await reply_text(update, _("‚ö†Ô∏è –í–Ω—É—Ç—Ä–µ–Ω–Ω—è—è –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ /start")); return ConversationHandler.END


async def dept_emp_cb(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –ø—Ä–æ—Ñ–∏–ª—å —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∞, –≤—ã–±—Ä–∞–Ω–Ω–æ–≥–æ –∏–∑ —Å–ø–∏—Å–∫–∞ –æ—Ç–¥–µ–ª–∞."""
    if not update.callback_query or not update.callback_query.data: return DEPT_EMP_LIST
    cq = update.callback_query; user_id = str(update.effective_user.id)
    logger.info(f"DEPT_EMP_LIST callback '{cq.data}' from user {user_id}")
    try:
        try: await cq.answer()
        except BadRequest: pass
        parts = cq.data.split(":", 1)
        if len(parts) != 2 or not parts[1].isdigit(): raise ValueError(f"Invalid callback data format: {cq.data}")
        uid_str = parts[1]; dept_emps = context.user_data.get("dept_emps", {})
        user = dept_emps.get(uid_str)
        if not user:
            logger.warning(f"User {uid_str} not found in dept_emps cache for user {user_id}. Fetching from DB.")
            user = await fetch_user_by_id(int(uid_str))
            if not user: logger.error(f"Failed to fetch user {uid_str} from DB in dept_emp_cb."); await reply_text(update, _("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–π—Ç–∏ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–µ.")); return DEPT_EMP_LIST
        await send_user_profile(cq.message, user)
        return DEPT_EMP_LIST
    except (ValueError, IndexError, KeyError) as e: logger.warning(f"Invalid data or state in dept_emp_cb: {cq.data} ({e})"); await reply_text(update, _("‚ö†Ô∏è –û—à–∏–±–∫–∞ –¥–∞–Ω–Ω—ã—Ö –ø—Ä–∏ –≤—ã–±–æ—Ä–µ —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∞.")); return DEPT_EMP_LIST
    except Exception as e: logger.exception(f"Unexpected error in dept_emp_cb: {e}"); await reply_text(update, _("‚ö†Ô∏è –í–Ω—É—Ç—Ä–µ–Ω–Ω—è—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–∫–∞–∑–µ –ø—Ä–æ—Ñ–∏–ª—è.")); return DEPT_EMP_LIST


async def all_users_cb(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –ø—Ä–æ—Ñ–∏–ª—å —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∞, –≤—ã–±—Ä–∞–Ω–Ω–æ–≥–æ –∏–∑ –æ–±—â–µ–≥–æ —Å–ø–∏—Å–∫–∞."""
    if not update.callback_query or not update.callback_query.data: return EMP_LIST
    cq = update.callback_query; user_id = str(update.effective_user.id)
    logger.info(f"EMP_LIST callback '{cq.data}' from user {user_id}")
    try:
        try: await cq.answer()
        except BadRequest: pass
        parts = cq.data.split(":", 1)
        if len(parts) != 2 or not parts[1].isdigit(): raise ValueError(f"Invalid callback data format: {cq.data}")
        uid = int(parts[1])
        logger.debug(f"User {user_id} requested profile for user {uid} from all users list.")
        user = await fetch_user_by_id(uid)
        if not user: logger.error(f"Failed to fetch user {uid} from DB in all_users_cb."); await reply_text(update, _("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–π—Ç–∏ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ–± —ç—Ç–æ–º —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–µ.")); return EMP_LIST
        await send_user_profile(cq.message, user)
        return EMP_LIST
    except (ValueError, IndexError) as e: logger.warning(f"Invalid callback data in all_users_cb: {cq.data} ({e})"); await reply_text(update, _("‚ö†Ô∏è –ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –≤—ã–±–æ—Ä —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∞.")); return EMP_LIST
    except Exception as e: logger.exception(f"Unexpected error in all_users_cb: {e}"); await reply_text(update, _("‚ö†Ô∏è –í–Ω—É—Ç—Ä–µ–Ω–Ω—è—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–∫–∞–∑–µ –ø—Ä–æ—Ñ–∏–ª—è.")); return EMP_LIST