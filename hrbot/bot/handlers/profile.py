# hrbot/bot/handlers/profile.py
import logging
import os
from django.conf import settings
from django.utils.translation import gettext as _
from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup
from telegram.constants import ParseMode
from telegram.error import BadRequest, NetworkError, TimedOut, TelegramError
from telegram.ext import ContextTypes, ConversationHandler

from ..constants import PROFILE_MENU, PROFILE_UPLOAD_PHOTO, PROFILE_SET_NAME, CB_MAIN, CB_PROFILE
from ..db import get_or_create_tguser, update_user_image, update_user_name
from ..utils import reply_text, edit_message_text
from .common import start # –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º start –¥–ª—è –≤–æ–∑–≤—Ä–∞—Ç–∞ –≤ –º–µ–Ω—é

logger = logging.getLogger(__name__)

async def profile_menu_cb(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    if not update.callback_query or not update.callback_query.data: return PROFILE_MENU
    cq = update.callback_query; user_id = str(update.effective_user.id)
    logger.info(f"PROFILE_MENU callback '{cq.data}' from user {user_id}")
    try:
        try: await cq.answer()
        except BadRequest: pass
        parts = cq.data.split(":", 1)
        if len(parts) != 2 or parts[0] != CB_PROFILE: raise ValueError(f"Invalid callback data format: {cq.data}")
        key = parts[1]
        if key == "photo": await edit_message_text(cq.message, _("üì∏ –û—Ç–ø—Ä–∞–≤—å—Ç–µ —Ñ–æ—Ç–æ, –∫–æ—Ç–æ—Ä–æ–µ —Ö–æ—Ç–∏—Ç–µ —É—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –∫–∞–∫ —Ñ–æ—Ç–æ –ø—Ä–æ—Ñ–∏–ª—è (–ø–æ–∂–∞–ª—É–π—Å—Ç–∞, *–Ω–µ* –∫–∞–∫ –¥–æ–∫—É–º–µ–Ω—Ç)."), parse_mode=ParseMode.MARKDOWN); return PROFILE_UPLOAD_PHOTO
        elif key == "name": tg = await get_or_create_tguser(user_id); current_name = tg.user.first_name if tg and tg.user else _("–≤–∞—à–µ —Ç–µ–∫—É—â–µ–µ –∏–º—è"); await edit_message_text(cq.message, _("‚úçÔ∏è –í–≤–µ–¥–∏—Ç–µ –≤–∞—à–µ –Ω–æ–≤–æ–µ –∏–º—è (–Ω–∞–ø—Ä–∏–º–µ—Ä, '{name}'):").format(name=current_name)); return PROFILE_SET_NAME
        else: logger.warning(f"Unknown key '{key}' in profile_menu_cb."); await edit_message_text(cq.message, _("‚ö†Ô∏è –ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ–ø—Ü–∏—è.")); return PROFILE_MENU
    except (ValueError, IndexError) as e: logger.warning(f"Invalid callback data in profile_menu_cb: {cq.data} ({e})"); await edit_message_text(cq.message, _("‚ö†Ô∏è –ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –∑–∞–ø—Ä–æ—Å.")); return PROFILE_MENU
    except (BadRequest, NetworkError, TimedOut) as e: logger.warning(f"Network/API error in profile_menu_cb: {e}"); await reply_text(update, _("‚ö†Ô∏è –û—à–∏–±–∫–∞ —Å–µ—Ç–∏ –∏–ª–∏ API. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.")); return PROFILE_MENU
    except Exception as e: logger.exception(f"Unexpected error in profile_menu_cb: {e}"); await reply_text(update, _("‚ö†Ô∏è –í–Ω—É—Ç—Ä–µ–Ω–Ω—è—è –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ /start")); return ConversationHandler.END


async def profile_upload_photo(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    if not update.message or not update.message.photo: await reply_text(update, _("‚ö†Ô∏è –≠—Ç–æ –Ω–µ —Ñ–æ—Ç–æ. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ.")); return PROFILE_UPLOAD_PHOTO
    user_id = str(update.effective_user.id); logger.info(f"Received photo for profile update from user {user_id}.")
    photo = update.message.photo[-1]; tg = await get_or_create_tguser(user_id)
    if not tg or not tg.user: logger.error(f"Cannot find user profile for {user_id} during photo upload."); await reply_text(update, _("‚ùå –û—à–∏–±–∫–∞: –Ω–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–π—Ç–∏ –≤–∞—à –ø—Ä–æ—Ñ–∏–ª—å.")); return ConversationHandler.END
    file = None; downloaded_path = None; file_operation_success = False
    try:
        logger.debug(f"Getting file for photo from user {user_id}"); file = await photo.get_file()
        logger.debug(f"File info: id={file.file_id}, size={file.file_size}, path={file.file_path}")
        media_dir = os.path.join(settings.MEDIA_ROOT, 'profile_pics'); os.makedirs(media_dir, exist_ok=True)
        file_ext = os.path.splitext(file.file_path)[1].lower() if file.file_path and '.' in file.file_path else '.jpg'; allowed_extensions = ['.jpg', '.jpeg', '.png']
        if file_ext not in allowed_extensions: logger.warning(f"User {user_id} uploaded file with unsupported extension: {file_ext}"); await reply_text(update, _("‚ö†Ô∏è –ù–µ–ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º—ã–π —Ñ–æ—Ä–º–∞—Ç —Ñ–∞–π–ª–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ JPG, JPEG –∏–ª–∏ PNG.")); return PROFILE_UPLOAD_PHOTO
        file_name = f"user_{tg.user.id}_{file.file_unique_id}{file_ext}"; downloaded_path = os.path.join(media_dir, file_name)
        logger.debug(f"Downloading photo to: {downloaded_path}"); await file.download_to_drive(downloaded_path); logger.info(f"Photo downloaded successfully to {downloaded_path}")
        rel_path = os.path.join('profile_pics', file_name).replace("\\", "/"); logger.debug(f"Updating user image field with relative path: {rel_path}")
        if await update_user_image(tg.user, rel_path): await reply_text(update, _("‚úÖ –§–æ—Ç–æ –ø—Ä–æ—Ñ–∏–ª—è —É—Å–ø–µ—à–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω–æ!")); file_operation_success = True
        else:
            await reply_text(update, _("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å —Ñ–æ—Ç–æ –≤ –≤–∞—à–µ–º –ø—Ä–æ—Ñ–∏–ª–µ (–æ—à–∏–±–∫–∞ –ë–î)."))
            if os.path.exists(downloaded_path):
                try: os.remove(downloaded_path); logger.info(f"Removed temporary file {downloaded_path} after DB save failure.")
                except OSError as remove_err: logger.error(f"Failed to remove temporary file {downloaded_path}: {remove_err}")
        if file_operation_success: return await start(update, context)
        else: await reply_text(update, _("–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Ñ–æ—Ç–æ –µ—â–µ —Ä–∞–∑.")); return PROFILE_UPLOAD_PHOTO
    except (NetworkError, TimedOut) as e: logger.warning(f"Network error downloading/getting photo file for user {user_id}: {e}"); await reply_text(update, _("‚ö†Ô∏è –û—à–∏–±–∫–∞ —Å–µ—Ç–∏ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ —Ñ–æ—Ç–æ. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.")); return PROFILE_UPLOAD_PHOTO
    except TelegramError as e: logger.exception(f"Telegram error with photo file processing for user {user_id}: {e}"); await reply_text(update, _("‚ö†Ô∏è –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –Ω–∞ —Å—Ç–æ—Ä–æ–Ω–µ Telegram –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ —Ñ–æ—Ç–æ. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –¥—Ä—É–≥–æ–µ —Ñ–æ—Ç–æ –∏–ª–∏ –ø–æ–∑–∂–µ.")); return PROFILE_UPLOAD_PHOTO
    except OSError as e:
        logger.exception(f"OS error saving photo to {downloaded_path} for user {user_id}: {e}"); await reply_text(update, _("‚ùå –û—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ —Ñ–∞–π–ª–∞ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è. –ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—ã —É–≤–µ–¥–æ–º–ª–µ–Ω—ã."))
        buttons = [ [InlineKeyboardButton(_("üì∏ –ó–∞–≥—Ä—É–∑–∏—Ç—å/—Å–º–µ–Ω–∏—Ç—å —Ñ–æ—Ç–æ"), callback_data=f"{CB_PROFILE}:photo")], [InlineKeyboardButton(_("‚úçÔ∏è –ò–∑–º–µ–Ω–∏—Ç—å –∏–º—è"), callback_data=f"{CB_PROFILE}:name")], [InlineKeyboardButton(_("üîô –ù–∞–∑–∞–¥"), callback_data=f"{CB_MAIN}:back_main")],]; await reply_text(update, _("‚öôÔ∏è *–ù–∞—Å—Ç—Ä–æ–π–∫–∏ –ø—Ä–æ—Ñ–∏–ª—è*"), reply_markup=InlineKeyboardMarkup(buttons), parse_mode=ParseMode.MARKDOWN); return PROFILE_MENU
    except Exception as e: logger.exception(f"Unexpected error in profile_upload_photo for user {user_id}: {e}"); await reply_text(update, _("‚ö†Ô∏è –ù–µ–ø—Ä–µ–¥–≤–∏–¥–µ–Ω–Ω–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ —Ñ–æ—Ç–æ.")); return await start(update, context)


async def profile_set_name(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    if not update.message or not update.message.text: await reply_text(update, _("‚ö†Ô∏è –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –∏–º—è —Ç–µ–∫—Å—Ç–æ–º.")); return PROFILE_SET_NAME
    user_id = str(update.effective_user.id); logger.info(f"Received new name input from user {user_id}.")
    new_name = update.message.text.strip()
    if not new_name: await reply_text(update, _("‚ö†Ô∏è –ò–º—è –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –ø—É—Å—Ç—ã–º. –í–≤–µ–¥–∏—Ç–µ –≤–∞—à–µ –∏–º—è:")); return PROFILE_SET_NAME
    if len(new_name) > 50: await reply_text(update, _("‚ö†Ô∏è –ò–º—è —Å–ª–∏—à–∫–æ–º –¥–ª–∏–Ω–Ω–æ–µ (–º–∞–∫—Å–∏–º—É–º 50 —Å–∏–º–≤–æ–ª–æ–≤). –í–≤–µ–¥–∏—Ç–µ –∏–º—è –ø–æ–∫–æ—Ä–æ—á–µ:")); return PROFILE_SET_NAME
    tg = await get_or_create_tguser(user_id)
    if not tg or not tg.user: await reply_text(update, _("‚ùå –û—à–∏–±–∫–∞: –Ω–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–π—Ç–∏ –≤–∞—à –ø—Ä–æ—Ñ–∏–ª—å –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –∏–º–µ–Ω–∏.")); logger.error(f"Profile not found or user not loaded for tg_id {user_id} in profile_set_name."); return ConversationHandler.END
    logger.debug(f"Attempting to update name for user {tg.user.id} to '{new_name}'.")
    try:
        if await update_user_name(tg.user, new_name): await reply_text(update, _("‚úÖ –í–∞—à–µ –∏–º—è —É—Å–ø–µ—à–Ω–æ –∏–∑–º–µ–Ω–µ–Ω–æ –Ω–∞ '{name}'!").format(name=new_name)); return await start(update, context)
        else: await reply_text(update, _("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –æ–±–Ω–æ–≤–∏—Ç—å –∏–º—è –∏–∑-–∑–∞ –æ—à–∏–±–∫–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö.")); return PROFILE_SET_NAME
    except Exception as e: logger.exception(f"Unexpected error in profile_set_name saving for user {tg.user.id}: {e}"); await reply_text(update, _("‚ö†Ô∏è –í–Ω—É—Ç—Ä–µ–Ω–Ω—è—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ –∏–º–µ–Ω–∏.")); return await start(update, context)