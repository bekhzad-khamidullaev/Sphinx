# hrbot/bot/handlers/search.py
import logging
from django.utils.translation import gettext as _
from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup
from telegram.constants import ParseMode
from telegram.error import BadRequest, NetworkError, TimedOut
from telegram.ext import ContextTypes, ConversationHandler

from ..constants import SEARCH_INPUT, SEARCH_RESULTS, CB_MAIN, CB_SEARCH_RES, CB_NOOP
from ..db import search_users, fetch_user_by_id
from ..utils import reply_text, edit_message_text, send_user_profile
from .common import start # –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º start –¥–ª—è –≤–æ–∑–≤—Ä–∞—Ç–∞ –≤ –º–µ–Ω—é

logger = logging.getLogger(__name__)

async def search_input_msg(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –≤–≤–æ–¥ —Ç–µ–∫—Å—Ç–∞ –¥–ª—è –ø–æ–∏—Å–∫–∞ —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∞."""
    if not update.message or not update.message.text: await reply_text(update, _("‚ö†Ô∏è –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –∑–∞–ø—Ä–æ—Å –¥–ª—è –ø–æ–∏—Å–∫–∞ —Ç–µ–∫—Å—Ç–æ–º.")); return SEARCH_INPUT
    user_id = str(update.effective_user.id); q = update.message.text.strip()
    logger.info(f"User {user_id} submitted search query: '{q}'")
    if not q: await reply_text(update, _("‚ö†Ô∏è –ó–∞–ø—Ä–æ—Å –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –ø—É—Å—Ç—ã–º. –í–≤–µ–¥–∏—Ç–µ –∏–º—è, —Ñ–∞–º–∏–ª–∏—é, —Ç–µ–ª–µ—Ñ–æ–Ω –∏–ª–∏ email:")); return SEARCH_INPUT
    if len(q) < 3: await reply_text(update, _("‚ö†Ô∏è –ó–∞–ø—Ä–æ—Å —Å–ª–∏—à–∫–æ–º –∫–æ—Ä–æ—Ç–∫–∏–π (–º–∏–Ω–∏–º—É–º 3 —Å–∏–º–≤–æ–ª–∞).")); return SEARCH_INPUT
    try:
        users = await search_users(q)
        if not users: logger.info(f"No users found for query '{q}' by user {user_id}."); await reply_text(update, _("‚ùå –ü–æ –≤–∞—à–µ–º—É –∑–∞–ø—Ä–æ—Å—É '{query}' —Å–æ–≤–ø–∞–¥–µ–Ω–∏–π –Ω–µ –Ω–∞–π–¥–µ–Ω–æ.\n–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –¥—Ä—É–≥–æ–π –∑–∞–ø—Ä–æ—Å –∏–ª–∏ –≤–µ—Ä–Ω–∏—Ç–µ—Å—å –≤ /start.").format(query=q)); return SEARCH_INPUT
        logger.info(f"Found {len(users)} user(s) for query '{q}' by user {user_id}.")
        context.user_data["search_res_names"] = {str(u.id): u.get_full_name() for u in users}
        context.user_data["search_res_users"] = {str(u.id): u for u in users}
        buttons = [ [InlineKeyboardButton(name, callback_data=f"{CB_SEARCH_RES}:{uid}")] for uid, name in list(context.user_data["search_res_names"].items())[:15] ] + [[InlineKeyboardButton(_("üîÑ –ù–æ–≤—ã–π –ø–æ–∏—Å–∫"), callback_data=f"{CB_MAIN}:search_emp")], [InlineKeyboardButton(_("üîô –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é"), callback_data=f"{CB_MAIN}:back_main")]]
        if len(users) > 15: buttons.insert(-1, [InlineKeyboardButton(_("... (–µ—â–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã)"), callback_data=CB_NOOP)])
        await reply_text(update, _("üîç *–†–µ–∑—É–ª—å—Ç–∞—Ç—ã –ø–æ–∏—Å–∫–∞ –ø–æ –∑–∞–ø—Ä–æ—Å—É '{query}'* ({count} –Ω–∞–π–¥–µ–Ω–æ):").format(query=q, count=len(users)), reply_markup=InlineKeyboardMarkup(buttons), parse_mode=ParseMode.MARKDOWN)
        return SEARCH_RESULTS
    except (NetworkError, TimedOut) as e: logger.warning(f"Network error during user search for user {user_id}: {e}"); await reply_text(update, _("‚ö†Ô∏è –û—à–∏–±–∫–∞ —Å–µ—Ç–∏ –≤–æ –≤—Ä–µ–º—è –ø–æ–∏—Å–∫–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.")); return SEARCH_INPUT
    except Exception as e: logger.exception(f"Unexpected error during search_input_msg for query '{q}' by user {user_id}: {e}"); await reply_text(update, _("‚ö†Ô∏è –í–Ω—É—Ç—Ä–µ–Ω–Ω—è—è –æ—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞ –≤–æ –≤—Ä–µ–º—è –ø–æ–∏—Å–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ /start")); return ConversationHandler.END


async def search_results_cb(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –ø—Ä–æ—Ñ–∏–ª—å —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∞, –≤—ã–±—Ä–∞–Ω–Ω–æ–≥–æ –∏–∑ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –ø–æ–∏—Å–∫–∞."""
    if not update.callback_query or not update.callback_query.data: return SEARCH_RESULTS
    cq = update.callback_query; user_id = str(update.effective_user.id)
    logger.info(f"SEARCH_RESULTS callback '{cq.data}' from user {user_id}")
    try:
        try: await cq.answer()
        except BadRequest: pass
        parts = cq.data.split(":", 1)
        if len(parts) != 2 or not parts[1].isdigit(): raise ValueError(f"Invalid callback data format: {cq.data}")
        uid_str = parts[1]; search_res_users = context.user_data.get("search_res_users", {})
        user = search_res_users.get(uid_str)
        if not user:
            logger.error(f"User {uid_str} was in search results but not found in user_data cache for user {user_id}. Fetching from DB.")
            user = await fetch_user_by_id(int(uid_str))
            if not user: logger.error(f"Failed to fetch user {uid_str} from DB in search_results_cb."); await reply_text(update, _("‚ùå –û—à–∏–±–∫–∞: –ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å –¥–∞–Ω–Ω—ã–µ –≤—ã–±—Ä–∞–Ω–Ω–æ–≥–æ —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∞.")); return SEARCH_RESULTS
        logger.debug(f"User {user_id} selected user {uid_str} from search results.")
        await send_user_profile(cq.message, user)
        return SEARCH_RESULTS
    except (ValueError, IndexError, KeyError) as e: logger.warning(f"Invalid data or state in search_results_cb: {cq.data} ({e})"); await reply_text(update, _("‚ö†Ô∏è –û—à–∏–±–∫–∞ –¥–∞–Ω–Ω—ã—Ö –ø—Ä–∏ –≤—ã–±–æ—Ä–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞ –ø–æ–∏—Å–∫–∞.")); return SEARCH_RESULTS
    except Exception as e: logger.exception(f"Unexpected error in search_results_cb: {e}"); await reply_text(update, _("‚ö†Ô∏è –í–Ω—É—Ç—Ä–µ–Ω–Ω—è—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–∫–∞–∑–µ –ø—Ä–æ—Ñ–∏–ª—è.")); return SEARCH_RESULTS