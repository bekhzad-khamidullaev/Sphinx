# hrbot/bot/handlers/evaluation.py

import logging
from django.utils.translation import gettext as _
from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup
from telegram.constants import ParseMode
from telegram.error import BadRequest, NetworkError, TimedOut
from telegram.ext import ContextTypes, ConversationHandler
from asgiref.sync import sync_to_async
from django.conf import settings
# –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏—è –∏ –ø—Ä–µ—Ñ–∏–∫—Å—ã
from ..constants import ( # –î–æ–±–∞–≤–ª—è–µ–º EVAL_Q –≤ –∏–º–ø–æ—Ä—Ç—ã —Å–æ—Å—Ç–æ—è–Ω–∏–π
    EVAL_SELECT_QSET, EVAL_SELECT_DEPT, EVAL_SELECT_EMP, EVAL_Q, MAIN_MENU,
    CB_MAIN, CB_EVAL_QSET, CB_EVAL_DEPT, CB_EVAL_EMP, CB_NOOP
)
# –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º ORM –≤—Ä–∞–ø–ø–µ—Ä—ã –∏ —Ö–µ–ª–ø–µ—Ä—ã
from ..db import (
    get_active_questionnaires, all_departments, users_in_dept,
    get_questionnaire_questions, save_eval, get_or_create_tguser
)
from ..utils import reply_text, edit_message_text, send_message

# –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º –º–æ–¥–µ–ª–∏ –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ —Ç–∏–ø–æ–≤ –∏ –¥–æ—Å—Ç—É–ø–∞ –∫ –ø–æ–ª—è–º
from hrbot.models import Questionnaire, Question, Evaluation
from user_profiles.models import User, Role, Department

logger = logging.getLogger(__name__)

# --- –®–∞–≥ 1: –í—ã–±–æ—Ä –û–ø—Ä–æ—Å–Ω–∏–∫–∞ (–±–µ–∑ –∏–∑–º–µ–Ω–µ–Ω–∏–π) ---
async def eval_select_qset_cb(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    if not update.callback_query or not update.callback_query.data: return EVAL_SELECT_QSET
    cq = update.callback_query; user_id = str(update.effective_user.id)
    logger.info(f"EVAL_SELECT_QSET callback '{cq.data}' from user {user_id}")
    try:
        try: await cq.answer()
        except BadRequest: pass
        parts = cq.data.split(":", 1)
        if len(parts) != 2 or not parts[1].isdigit(): raise ValueError(f"Invalid callback data format: {cq.data}")
        qset_id = int(parts[1]); context.user_data["eval_qset_id"] = qset_id
        qset_name = context.user_data.get("eval_qsets", {}).get(str(qset_id), f"ID {qset_id}")
        logger.debug(f"User {user_id} selected questionnaire {qset_id} ('{qset_name}') for evaluation.")
        deps = await all_departments()
        if not deps:
             await edit_message_text(cq.message, _("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å —Å–ø–∏—Å–æ–∫ –æ—Ç–¥–µ–ª–æ–≤ –¥–ª—è –≤—ã–±–æ—Ä–∞ —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∞."))
             questionnaires = await get_active_questionnaires()
             if questionnaires:
                 context.user_data["eval_qsets"] = {str(q.id): q.name for q in questionnaires}
                 buttons = [ [InlineKeyboardButton(name, callback_data=f"{CB_EVAL_QSET}:{qid}")] for qid, name in context.user_data["eval_qsets"].items() ] + [[InlineKeyboardButton(_("üîô –ù–∞–∑–∞–¥"), callback_data=f"{CB_MAIN}:back_main")]]
                 await edit_message_text(cq.message, _("üìä *–ù–æ–≤–∞—è –æ—Ü–µ–Ω–∫–∞*\n–í—ã–±–µ—Ä–∏—Ç–µ —Ç–∏–ø –æ–ø—Ä–æ—Å–Ω–∏–∫–∞:"), reply_markup=InlineKeyboardMarkup(buttons), parse_mode=ParseMode.MARKDOWN); return EVAL_SELECT_QSET
             else: from .common import start; return await start(update, context) # –ò–º–ø–æ—Ä—Ç –∏ –≤—ã–∑–æ–≤ start
        context.user_data["eval_deps"] = {str(d.id): d.name for d in deps}
        buttons = [ [InlineKeyboardButton(name, callback_data=f"{CB_EVAL_DEPT}:{did}")] for did, name in context.user_data["eval_deps"].items()] + [[InlineKeyboardButton(_("üîô –ù–∞–∑–∞–¥ –∫ –æ–ø—Ä–æ—Å–Ω–∏–∫–∞–º"), callback_data=f"{CB_MAIN}:new_eval")]]
        await edit_message_text(cq.message, _("üè¢ *–û—Ü–µ–Ω–∫–∞ (–û–ø—Ä–æ—Å–Ω–∏–∫: {qset})*\n–í—ã–±–µ—Ä–∏—Ç–µ –æ—Ç–¥–µ–ª —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∞:").format(qset=qset_name), reply_markup=InlineKeyboardMarkup(buttons), parse_mode=ParseMode.MARKDOWN)
        return EVAL_SELECT_DEPT
    except (ValueError, IndexError) as e: logger.warning(f"Invalid callback data in eval_select_qset_cb: {cq.data} ({e})"); await edit_message_text(cq.message, _("‚ö†Ô∏è –ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –≤—ã–±–æ—Ä –æ–ø—Ä–æ—Å–Ω–∏–∫–∞.")); return EVAL_SELECT_QSET
    except (BadRequest, NetworkError, TimedOut) as e: logger.warning(f"Network/API error in eval_select_qset_cb: {e}"); await reply_text(update, _("‚ö†Ô∏è –û—à–∏–±–∫–∞ —Å–µ—Ç–∏ –∏–ª–∏ API. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –≤—ã–±—Ä–∞—Ç—å –æ–ø—Ä–æ—Å–Ω–∏–∫ —Å–Ω–æ–≤–∞.")); return EVAL_SELECT_QSET
    except Exception as e: logger.exception(f"Unexpected error in eval_select_qset_cb: {e}"); await reply_text(update, _("‚ö†Ô∏è –í–Ω—É—Ç—Ä–µ–Ω–Ω—è—è –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ /start")); return ConversationHandler.END

async def eval_select_dept_cb(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    # ... (–∫–æ–¥ –±–µ–∑ –∏–∑–º–µ–Ω–µ–Ω–∏–π) ...
    if not update.callback_query or not update.callback_query.data: return EVAL_SELECT_DEPT
    cq = update.callback_query; user_id = str(update.effective_user.id)
    logger.info(f"EVAL_SELECT_DEPT callback '{cq.data}' from user {user_id}")
    try:
        try: await cq.answer()
        except BadRequest: pass
        parts = cq.data.split(":", 1)
        if len(parts) != 2 or not parts[1].isdigit(): raise ValueError(f"Invalid callback data format: {cq.data}")
        did = int(parts[1]); context.user_data["eval_dept_id"] = did
        dept_name = context.user_data.get("eval_deps", {}).get(str(did), f"ID {did}")
        qset_id = context.user_data.get("eval_qset_id")
        qset_name = context.user_data.get("eval_qsets", {}).get(str(qset_id), f"ID {qset_id}")
        logger.debug(f"User {user_id} selected department {did} ('{dept_name}') for evaluation using qset {qset_id}.")
        if not qset_id: logger.error(f"eval_qset_id not found in user_data for eval_select_dept_cb. User: {user_id}"); await edit_message_text(cq.message, _("‚ùå –û—à–∏–±–∫–∞: –æ–ø—Ä–æ—Å–Ω–∏–∫ –Ω–µ –±—ã–ª –≤—ã–±—Ä–∞–Ω. –ù–∞—á–Ω–∏—Ç–µ –æ—Ü–µ–Ω–∫—É –∑–∞–Ω–æ–≤–æ —Å /start.")); return ConversationHandler.END
        users = await users_in_dept(did)
        if not users:
             logger.warning(f"No users found in department {did} for evaluation.")
             await edit_message_text(cq.message, _("‚ùå –í –æ—Ç–¥–µ–ª–µ '{dept}' –Ω–µ—Ç —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–æ–≤. –í—ã–±–µ—Ä–∏—Ç–µ –¥—Ä—É–≥–æ–π –æ—Ç–¥–µ–ª.").format(dept=dept_name))
             deps = await all_departments()
             if deps:
                 context.user_data["eval_deps"] = {str(d.id): d.name for d in deps}
                 buttons = [ [InlineKeyboardButton(name, callback_data=f"{CB_EVAL_DEPT}:{dep_id}")] for dep_id, name in context.user_data["eval_deps"].items() ] + [[InlineKeyboardButton(_("üîô –ù–∞–∑–∞–¥ –∫ –æ–ø—Ä–æ—Å–Ω–∏–∫–∞–º"), callback_data=f"{CB_MAIN}:new_eval")]]
                 await edit_message_text(cq.message, _("üè¢ *–û—Ü–µ–Ω–∫–∞ (–û–ø—Ä–æ—Å–Ω–∏–∫: {qset})*\n–í—ã–±–µ—Ä–∏—Ç–µ –æ—Ç–¥–µ–ª —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∞:").format(qset=qset_name), reply_markup=InlineKeyboardMarkup(buttons), parse_mode=ParseMode.MARKDOWN)
                 return EVAL_SELECT_DEPT
             else: from .common import start; return await start(update, context)
        context.user_data["eval_emps"] = {str(u.id): u.get_full_name() for u in users}
        context.user_data["eval_emp_objects"] = {str(u.id): u for u in users}
        buttons = [ [InlineKeyboardButton(name, callback_data=f"{CB_EVAL_EMP}:{uid}")] for uid, name in context.user_data["eval_emps"].items()] + [[InlineKeyboardButton(_("üîô –ù–∞–∑–∞–¥ –∫ –æ—Ç–¥–µ–ª–∞–º"), callback_data=f"{CB_EVAL_QSET}:{qset_id}")]] # –ù–∞–∑–∞–¥ –∫ –≤—ã–±–æ—Ä—É –æ—Ç–¥–µ–ª–∞
        await edit_message_text(cq.message, _("üë§ *–û—Ü–µ–Ω–∫–∞ (–û—Ç–¥–µ–ª: {dept})*\n–í—ã–±–µ—Ä–∏—Ç–µ —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∞:").format(dept=dept_name), reply_markup=InlineKeyboardMarkup(buttons), parse_mode=ParseMode.MARKDOWN)
        return EVAL_SELECT_EMP
    except (ValueError, IndexError, KeyError) as e: logger.warning(f"Invalid data or state in eval_select_dept_cb: {cq.data} ({e})"); await edit_message_text(cq.message, _("‚ö†Ô∏è –û—à–∏–±–∫–∞ –¥–∞–Ω–Ω—ã—Ö. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –≤—ã–±—Ä–∞—Ç—å –æ—Ç–¥–µ–ª —Å–Ω–æ–≤–∞.")); return EVAL_SELECT_DEPT
    except (BadRequest, NetworkError, TimedOut) as e: logger.warning(f"Network/API error in eval_select_dept_cb: {e}"); await reply_text(update, _("‚ö†Ô∏è –û—à–∏–±–∫–∞ —Å–µ—Ç–∏ –∏–ª–∏ API. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –≤—ã–±—Ä–∞—Ç—å –æ—Ç–¥–µ–ª —Å–Ω–æ–≤–∞.")); return EVAL_SELECT_DEPT
    except Exception as e: logger.exception(f"Unexpected error in eval_select_dept_cb: {e}"); await reply_text(update, _("‚ö†Ô∏è –í–Ω—É—Ç—Ä–µ–Ω–Ω—è—è –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ /start")); return ConversationHandler.END


# --- –®–∞–≥ 3: –í—ã–±–æ—Ä –°–æ—Ç—Ä—É–¥–Ω–∏–∫–∞ –∏ –ø–æ–∫–∞–∑ –ü–ï–†–í–û–ì–û –≤–æ–ø—Ä–æ—Å–∞ ---
async def eval_select_emp_cb(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –≤—ã–±–æ—Ä —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∞ –¥–ª—è –æ—Ü–µ–Ω–∫–∏ –∏ –Ω–∞—á–∏–Ω–∞–µ—Ç –æ–ø—Ä–æ—Å."""
    if not update.callback_query or not update.callback_query.data: return EVAL_SELECT_EMP
    cq = update.callback_query; user_id = str(update.effective_user.id)
    logger.info(f"EVAL_SELECT_EMP callback '{cq.data}' from user {user_id}")
    try:
        try: await cq.answer()
        except BadRequest: pass
        parts = cq.data.split(":", 1)
        if len(parts) != 2 or not parts[1].isdigit(): raise ValueError(f"Invalid callback data format: {cq.data}")
        uid_str = parts[1]; uid = int(uid_str)
        qset_id = context.user_data.get("eval_qset_id"); eval_emps = context.user_data.get("eval_emps", {}); dept_id = context.user_data.get("eval_dept_id"); emp_objects = context.user_data.get("eval_emp_objects", {})
        if not qset_id or not eval_emps or uid_str not in eval_emps or not dept_id or not emp_objects: logger.error(f"State error in eval_select_emp_cb for user {user_id}: qset_id={qset_id}, uid={uid_str} in eval_emps={uid_str in eval_emps}, dept_id={dept_id}, emp_objects exists={bool(emp_objects)}"); await edit_message_text(cq.message, _("‚ùå –û—à–∏–±–∫–∞: –¥–∞–Ω–Ω—ã–µ —Å–µ—Å—Å–∏–∏ –æ—Ü–µ–Ω–∫–∏ –ø–æ—Ç–µ—Ä—è–Ω—ã. –ù–∞—á–Ω–∏—Ç–µ –æ—Ü–µ–Ω–∫—É –∑–∞–Ω–æ–≤–æ —Å /start.")); return ConversationHandler.END
        context.user_data["eval_emp_id"] = uid; context.user_data["eval_emp_name"] = eval_emps[uid_str]
        selected_user_obj = emp_objects.get(uid_str); context.user_data["eval_role_id"] = None
        if selected_user_obj:
             user_roles = await sync_to_async(list)(selected_user_obj.roles.all()[:1])
             if user_roles: context.user_data["eval_role_id"] = user_roles[0].id; logger.debug(f"Found role ID {user_roles[0].id} for evaluated employee {uid}")
             else: logger.debug(f"No roles found for evaluated employee {uid}")
        else: logger.warning(f"Could not find User object for employee ID {uid} in cache.")
        logger.debug(f"User {user_id} selected employee {uid} ('{eval_emps[uid_str]}') for evaluation using qset {qset_id}.")
        qs = await get_questionnaire_questions(qset_id)
        if not qs:
            logger.warning(f"No questions found for questionnaire {qset_id}. Cannot start evaluation.")
            await edit_message_text(cq.message, _("‚ùå –î–ª—è –≤—ã–±—Ä–∞–Ω–Ω–æ–≥–æ –æ–ø—Ä–æ—Å–Ω–∏–∫–∞ –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω—ã –≤–æ–ø—Ä–æ—Å—ã. –û—Ü–µ–Ω–∫–∞ –Ω–µ–≤–æ–∑–º–æ–∂–Ω–∞."))
            buttons = [ [InlineKeyboardButton(name, callback_data=f"{CB_EVAL_EMP}:{e_uid}")] for e_uid, name in eval_emps.items() ] + [[InlineKeyboardButton(_("üîô –ù–∞–∑–∞–¥ –∫ –æ—Ç–¥–µ–ª–∞–º"), callback_data=f"{CB_EVAL_QSET}:{qset_id}")]]
            await edit_message_text(cq.message, _("üë§ *–û—Ü–µ–Ω–∫–∞*\n–í—ã–±–µ—Ä–∏—Ç–µ —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∞:"), reply_markup=InlineKeyboardMarkup(buttons), parse_mode=ParseMode.MARKDOWN); return EVAL_SELECT_EMP
        context.user_data["eval_qs"] = qs; context.user_data["eval_answers"] = []; context.user_data["eval_idx"] = 0; logger.debug(f"Starting evaluation with {len(qs)} questions for user {user_id}.")

        # --- –ü–æ–∫–∞–∑ –ø–µ—Ä–≤–æ–≥–æ –≤–æ–ø—Ä–æ—Å–∞ (—Å –∫–Ω–æ–ø–∫–∞–º–∏ –∏–ª–∏ –∫–Ω–æ–ø–∫–æ–π –ø—Ä–æ–ø—É—Å–∫–∞) ---
        current_q = qs[0]
        question_text = f"‚ùì *–í–æ–ø—Ä–æ—Å 1/{len(qs)}*\n\n{current_q.text}"
        keyboard = None
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ answer_options —ç—Ç–æ –Ω–µ–ø—É—Å—Ç–æ–π —Å–ø–∏—Å–æ–∫
        if current_q.answer_options and isinstance(current_q.answer_options, list):
            buttons = []
            for idx, option in enumerate(current_q.answer_options):
                 callback_data = f"eval_answer:{current_q.pk}:{idx}"
                 buttons.append(InlineKeyboardButton(str(option), callback_data=callback_data))
            keyboard = InlineKeyboardMarkup([buttons[i:i + 2] for i in range(0, len(buttons), 2)])
        else:
             # –ï—Å–ª–∏ –æ–ø—Ü–∏–π –Ω–µ—Ç –∏–ª–∏ –æ–Ω–∏ –ø—É—Å—Ç—ã–µ, –ø—Ä–µ–¥–ª–∞–≥–∞–µ–º –ø—Ä–æ–ø—É—Å—Ç–∏—Ç—å
             logger.warning(f"Question {current_q.pk} has no valid answer options list. Offering skip.")
             keyboard = InlineKeyboardMarkup([[InlineKeyboardButton(_("–ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å –≤–æ–ø—Ä–æ—Å"), callback_data=f"eval_answer:{current_q.pk}:-1")]]) # -1 –∫–∞–∫ –∏–Ω–¥–µ–∫—Å –ø—Ä–æ–ø—É—Å–∫–∞

        await edit_message_text(cq.message, question_text, reply_markup=keyboard, parse_mode=ParseMode.MARKDOWN)
        return EVAL_Q

    except (ValueError, IndexError, KeyError) as e:
         logger.warning(f"Invalid data or state in eval_select_emp_cb: {cq.data} ({e})")
         await edit_message_text(cq.message, _("‚ö†Ô∏è –û—à–∏–±–∫–∞ –¥–∞–Ω–Ω—ã—Ö. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –≤—ã–±—Ä–∞—Ç—å —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∞ —Å–Ω–æ–≤–∞."))
         dept_id = context.user_data.get("eval_dept_id"); eval_emps = context.user_data.get("eval_emps", {}); qset_id = context.user_data.get("eval_qset_id")
         if dept_id and eval_emps and qset_id:
             buttons = [ [InlineKeyboardButton(name, callback_data=f"{CB_EVAL_EMP}:{e_uid}")] for e_uid, name in eval_emps.items()] + [[InlineKeyboardButton(_("üîô –ù–∞–∑–∞–¥ –∫ –æ—Ç–¥–µ–ª–∞–º"), callback_data=f"{CB_EVAL_QSET}:{qset_id}")]]
             await edit_message_text(cq.message, _("üë§ *–û—Ü–µ–Ω–∫–∞*\n–í—ã–±–µ—Ä–∏—Ç–µ —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∞:"), reply_markup=InlineKeyboardMarkup(buttons), parse_mode=ParseMode.MARKDOWN); return EVAL_SELECT_EMP
         else: from .common import start; return await start(update, context)
    except (BadRequest, NetworkError, TimedOut) as e: logger.warning(f"Network/API error in eval_select_emp_cb: {e}"); await reply_text(update, _("‚ö†Ô∏è –û—à–∏–±–∫–∞ —Å–µ—Ç–∏ –∏–ª–∏ API. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –≤—ã–±—Ä–∞—Ç—å —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∞ —Å–Ω–æ–≤–∞.")); return EVAL_SELECT_EMP
    except Exception as e: logger.exception(f"Unexpected error in eval_select_emp_cb: {e}"); await reply_text(update, _("‚ö†Ô∏è –í–Ω—É—Ç—Ä–µ–Ω–Ω—è—è –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ /start")); return ConversationHandler.END

# --- –®–∞–≥ 4: –û–±—Ä–∞–±–æ—Ç–∫–∞ –ù–∞–∂–∞—Ç–∏—è –ö–Ω–æ–ø–∫–∏ –û—Ç–≤–µ—Ç–∞ ---
async def eval_answer_cb(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –Ω–∞–∂–∞—Ç–∏–µ –∫–Ω–æ–ø–∫–∏ —Å –≤–∞—Ä–∏–∞–Ω—Ç–æ–º –æ—Ç–≤–µ—Ç–∞."""
    # ... (–∫–æ–¥ —Ñ—É–Ω–∫—Ü–∏–∏ eval_answer_cb –∏–∑ –ø—Ä–µ–¥—ã–¥—É—â–µ–≥–æ –æ—Ç–≤–µ—Ç–∞) ...
    # ... (—Å –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–π –æ–±—Ä–∞–±–æ—Ç–∫–æ–π option_index == -1) ...
    if not update.callback_query or not update.callback_query.data: logger.warning("eval_answer_cb called without callback_query or data."); return EVAL_Q
    cq = update.callback_query; user_id = str(update.effective_user.id)
    logger.info(f"EVAL_Q callback '{cq.data}' from user {user_id}")
    try:
        try: await cq.answer()
        except BadRequest: pass
        parts = cq.data.split(":");
        if len(parts) != 3 or parts[0] != "eval_answer" or not parts[1].isdigit() or not parts[2].lstrip('-').isdigit(): raise ValueError(f"Invalid callback data format: {cq.data}")
        callback_q_pk = int(parts[1]); option_index = int(parts[2])
        current_idx = context.user_data.get("eval_idx"); questions = context.user_data.get("eval_qs"); answers = context.user_data.get("eval_answers"); qset_id = context.user_data.get("eval_qset_id"); emp_name = context.user_data.get("eval_emp_name"); emp_id = context.user_data.get("eval_emp_id"); role_id = context.user_data.get("eval_role_id")
        if current_idx is None or questions is None or answers is None or qset_id is None or emp_name is None: logger.error(f"State error in eval_answer_cb for user {user_id}. Missing context data."); await edit_message_text(cq.message, _("‚ùå –û—à–∏–±–∫–∞: –¥–∞–Ω–Ω—ã–µ –æ–ø—Ä–æ—Å–∞ –ø–æ—Ç–µ—Ä—è–Ω—ã. –ù–∞—á–Ω–∏—Ç–µ –æ—Ü–µ–Ω–∫—É –∑–∞–Ω–æ–≤–æ —Å /start.")); context.user_data.clear(); return ConversationHandler.END
        if current_idx >= len(questions): logger.warning(f"Received answer callback when evaluation should be finished. Idx: {current_idx}, TotalQs: {len(questions)}"); await edit_message_text(cq.message, _("–û—Ü–µ–Ω–∫–∞ —É–∂–µ –∑–∞–≤–µ—Ä—à–µ–Ω–∞.")); from .common import start; return await start(update, context)
        current_q = questions[current_idx]
        if current_q.pk != callback_q_pk: logger.warning(f"Callback question PK ({callback_q_pk}) doesn't match current question PK ({current_q.pk}) at index {current_idx}. User might have clicked an old button."); return EVAL_Q
        selected_answer = None
        if option_index == -1: logger.debug(f"User {user_id} skipped question {current_idx+1} (PK: {current_q.pk})")
        elif current_q.answer_options and isinstance(current_q.answer_options, list) and 0 <= option_index < len(current_q.answer_options): selected_answer = current_q.answer_options[option_index]; logger.debug(f"User {user_id} answered question {current_idx+1} (PK: {current_q.pk}) with option {option_index}: '{selected_answer}'")
        else: logger.error(f"Invalid option index {option_index} or missing options for question {current_q.pk}."); await edit_message_text(cq.message, _("‚ö†Ô∏è –û—à–∏–±–∫–∞: –ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –≤–∞—Ä–∏–∞–Ω—Ç –æ—Ç–≤–µ—Ç–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.")); return EVAL_Q
        answers.append(selected_answer); context.user_data["eval_idx"] += 1; next_idx = context.user_data["eval_idx"]
        if next_idx < len(questions):
            next_q = questions[next_idx]; question_text = f"‚ùì *–í–æ–ø—Ä–æ—Å {next_idx + 1}/{len(questions)}*\n\n{next_q.text}"; keyboard = None
            if next_q.answer_options and isinstance(next_q.answer_options, list):
                buttons = [];
                for idx, option in enumerate(next_q.answer_options): callback_data = f"eval_answer:{next_q.pk}:{idx}"; buttons.append(InlineKeyboardButton(str(option), callback_data=callback_data))
                keyboard = InlineKeyboardMarkup([buttons[i:i + 2] for i in range(0, len(buttons), 2)])
            else: logger.warning(f"Question {next_q.pk} has no valid answer options list! Offering skip."); keyboard = InlineKeyboardMarkup([[InlineKeyboardButton(_("–ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å –≤–æ–ø—Ä–æ—Å"), callback_data=f"eval_answer:{next_q.pk}:-1")]])
            await edit_message_text(cq.message, question_text, reply_markup=keyboard, parse_mode=ParseMode.MARKDOWN); return EVAL_Q
        else:
            logger.info(f"Evaluation finished by user {user_id} for employee '{emp_name}' (ID: {emp_id}) using qset {qset_id}.")
            tg_user = await get_or_create_tguser(user_id)
            if not tg_user: await reply_text(update, _("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –∏–¥–µ–Ω—Ç–∏—Ñ–∏—Ü–∏—Ä–æ–≤–∞—Ç—å –≤–∞—Å –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –æ—Ü–µ–Ω–∫–∏.")); logger.error(f"Could not get tg_user for {user_id} at evaluation save."); return ConversationHandler.END
            responses_dict = {str(q.id): a for q, a in zip(questions, answers)}
            data = { "evaluator_id": tg_user.id, "employee_name": emp_name, "employee_id": emp_id, "questionnaire_id": qset_id, "role_id": role_id, "responses": responses_dict }
            logger.debug(f"Attempting to save evaluation with data: {data}")
            saved_eval = await save_eval(data)
            if not saved_eval: await reply_text(update, _("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ –æ—Ü–µ–Ω–∫–∏ –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö. –ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—ã —É–≤–µ–¥–æ–º–ª–µ–Ω—ã.")); return ConversationHandler.END
            hr_chat_id = getattr(settings, 'HR_TELEGRAM_CHAT_ID', None)
            if hr_chat_id:
                 evaluator_name = tg_user.user.get_full_name() if hasattr(tg_user, 'user') and tg_user.user else f"TG User {tg_user.id}"; evaluator_tg_info = f"@{update.effective_user.username}" if update.effective_user.username else f"ID: {user_id}"; q_texts = {str(q.id): q.text for q in questions}; qset_name = context.user_data.get("eval_qsets", {}).get(str(qset_id), f"ID {qset_id}")
                 summary = (f"üìù *–ù–æ–≤–∞—è –æ—Ü–µ–Ω–∫–∞ —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∞ (ID: {saved_eval.id})*\n\nüë§ –°–æ—Ç—Ä—É–¥–Ω–∏–∫: *{emp_name}* (ID: {emp_id or 'N/A'})\nüìä –û–ø—Ä–æ—Å–Ω–∏–∫: {qset_name}\nüë®‚Äçüíª –û—Ü–µ–Ω—â–∏–∫: {evaluator_name} ({evaluator_tg_info})\n\n*–û—Ç–≤–µ—Ç—ã:*\n")
                 for q_id_str, answer_text in responses_dict.items(): summary += f"  ‚Ä¢ _{q_texts.get(q_id_str, f'–í–æ–ø—Ä–æ—Å ID {q_id_str}')}_: {answer_text or '-'}\n"
                 await send_message(context, chat_id=hr_chat_id, text=summary, parse_mode=ParseMode.MARKDOWN); logger.info(f"Evaluation summary sent to HR chat {hr_chat_id}.")
            else: logger.warning("HR_TELEGRAM_CHAT_ID is not set in settings. Cannot send summary.")
            await edit_message_text(cq.message, _("‚úÖ –û—Ü–µ–Ω–∫–∞ —É—Å–ø–µ—à–Ω–æ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∞! –°–ø–∞—Å–∏–±–æ."))
            keys_to_remove = [ "eval_qsets", "eval_qset_id", "eval_deps", "eval_dept_id", "eval_emps", "eval_emp_objects", "eval_emp_id", "eval_emp_name", "eval_role_id", "eval_qs", "eval_answers", "eval_idx"]
            for key in keys_to_remove: context.user_data.pop(key, None)
            logger.debug(f"Evaluation context data cleared for user {user_id}.")
            return ConversationHandler.END # –ó–∞–≤–µ—Ä—à–∞–µ–º –¥–∏–∞–ª–æ–≥ –ø–æ—Å–ª–µ –æ—Ü–µ–Ω–∫–∏
    except (ValueError, IndexError) as e: logger.warning(f"Invalid callback data or state in eval_answer_cb: {cq.data} ({e})"); await edit_message_text(cq.message, _("‚ö†Ô∏è –û—à–∏–±–∫–∞ –¥–∞–Ω–Ω—ã—Ö –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –æ—Ç–≤–µ—Ç–∞.")); return EVAL_Q
    except (BadRequest, NetworkError, TimedOut) as e: logger.warning(f"Network/API error in eval_answer_cb: {e}"); await reply_text(update, _("‚ö†Ô∏è –û—à–∏–±–∫–∞ —Å–µ—Ç–∏ –∏–ª–∏ API. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –Ω–∞–∂–∞—Ç—å –∫–Ω–æ–ø–∫—É —Å–Ω–æ–≤–∞.")); return EVAL_Q
    except Exception as e: logger.exception(f"Unexpected error in eval_answer_cb: {e}"); await reply_text(update, _("‚ö†Ô∏è –í–Ω—É—Ç—Ä–µ–Ω–Ω—è—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –æ—Ç–≤–µ—Ç–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ /start")); context.user_data.clear(); return ConversationHandler.END