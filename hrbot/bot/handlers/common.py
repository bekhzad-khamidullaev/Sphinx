# hrbot/bot/handlers/common.py

import logging
from django.conf import settings
from django.utils.translation import gettext as _
from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup
from telegram.constants import ParseMode
from telegram.error import BadRequest, NetworkError, TimedOut
from telegram.ext import ContextTypes, ConversationHandler

# –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏—è –∏ –ø—Ä–µ—Ñ–∏–∫—Å—ã
from ..constants import (
    MAIN_MENU, EVAL_SELECT_QSET, DEPT_LIST, EMP_LIST, PROFILE_MENU, LANG_MENU, SEARCH_INPUT,
    CB_MAIN, CB_EVAL_QSET, CB_DEPT, CB_USER, CB_PROFILE, CB_LANG, CB_NOOP
)
# –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º ORM –≤—Ä–∞–ø–ø–µ—Ä—ã –∏ —Ö–µ–ª–ø–µ—Ä—ã
from ..db import get_or_create_tguser, all_departments, all_users, get_active_questionnaires
from ..utils import reply_text, edit_message_text
from telegram.constants import ParseMode 
logger = logging.getLogger(__name__)

# --- /start Handler ---
async def start(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –∫–æ–º–∞–Ω–¥—É /start –∏ –ø–æ–∫–∞–∑—ã–≤–∞–µ—Ç –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é."""
    target_message = update.message or (update.callback_query and update.callback_query.message)
    if not target_message:
        logger.warning("start called without message or usable callback.")
        if update.effective_chat and hasattr(update, '_context'):
            # –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º –∑–¥–µ—Å—å, —á—Ç–æ–±—ã –∏–∑–±–µ–∂–∞—Ç—å —Ü–∏–∫–ª–∏—á–µ—Å–∫–æ–≥–æ –∏–º–ø–æ—Ä—Ç–∞
            from ..utils import send_message
            await send_message(update._context, update.effective_chat.id, _("–û—à–∏–±–∫–∞: –ù–µ —É–¥–∞–ª–æ—Å—å –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è –æ—Ç–≤–µ—Ç–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –≤–≤–µ—Å—Ç–∏ /start —Å–Ω–æ–≤–∞."))
        return ConversationHandler.END

    user_id = str(update.effective_user.id)
    logger.info(f"Processing /start command for user_id: {user_id}")
    tg = await get_or_create_tguser(user_id)

    if tg is None:
        logger.error(f"Failed to get/create TelegramUser or linked User for {user_id} (returned None).")
        await target_message.reply_text(_("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –¥–æ—Å—Ç—É–ø–µ –∫ –≤–∞—à–µ–º—É –ø—Ä–æ—Ñ–∏–ª—é. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ."))
        return ConversationHandler.END

    if not tg.approved:
        logger.info(f"User {user_id} is not approved.")
        await target_message.reply_text(_("‚è≥ –í–∞—à –∞–∫–∫–∞—É–Ω—Ç –µ—â–µ –Ω–µ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω HR-–æ—Ç–¥–µ–ª–æ–º. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ–∂–∏–¥–∞–π—Ç–µ."))
        return ConversationHandler.END

    context.user_data.clear()
    logger.debug(f"User data cleared for user {user_id}")

    kb = InlineKeyboardMarkup([
        [InlineKeyboardButton(_("üìù –ù–æ–≤–∞—è –æ—Ü–µ–Ω–∫–∞"), callback_data=f"{CB_MAIN}:new_eval")],
        [InlineKeyboardButton(_("üè¢ –°–ø–∏—Å–æ–∫ –æ—Ç–¥–µ–ª–æ–≤"), callback_data=f"{CB_MAIN}:show_depts"), InlineKeyboardButton(_("üë• –°–ø–∏—Å–æ–∫ —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–æ–≤"), callback_data=f"{CB_MAIN}:show_all_users")],
        [InlineKeyboardButton(_("‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –ø—Ä–æ—Ñ–∏–ª—è"), callback_data=f"{CB_MAIN}:profile_settings"), InlineKeyboardButton(_("üåê –í—ã–±–æ—Ä —è–∑—ã–∫–∞"), callback_data=f"{CB_MAIN}:choose_lang")],
        [InlineKeyboardButton(_("üîç –ü–æ–∏—Å–∫ —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∞"), callback_data=f"{CB_MAIN}:search_emp")],
        [InlineKeyboardButton(_("‚èπÔ∏è –ó–∞–≤–µ—Ä—à–∏—Ç—å /stop"), callback_data=f"{CB_MAIN}:stop")],
    ])
    message_text = _("üëã *–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é*\n–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:")

    if update.message: # –ï—Å–ª–∏ —ç—Ç–æ –±—ã–ª–∞ –∫–æ–º–∞–Ω–¥–∞ /start
        await reply_text(update, message_text, reply_markup=kb, parse_mode=ParseMode.MARKDOWN)
    elif update.callback_query: # –ï—Å–ª–∏ —ç—Ç–æ –≤–æ–∑–≤—Ä–∞—Ç –∏–∑ –¥—Ä—É–≥–æ–≥–æ –º–µ–Ω—é
        await edit_message_text(target_message, message_text, reply_markup=kb, parse_mode=ParseMode.MARKDOWN)

    return MAIN_MENU

# --- Main Menu Callback ---
async def main_menu_cb(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –Ω–∞–∂–∞—Ç–∏—è –∫–Ω–æ–ø–æ–∫ –≥–ª–∞–≤–Ω–æ–≥–æ –º–µ–Ω—é."""
    if not update.callback_query or not update.callback_query.data:
        logger.warning("main_menu_cb called without callback_query or data.")
        return MAIN_MENU

    cq = update.callback_query
    user_id = str(update.effective_user.id)
    logger.info(f"MAIN_MENU callback '{cq.data}' from user {user_id}")

    try:
        try: await cq.answer()
        except BadRequest: pass

        parts = cq.data.split(":", 1)
        if len(parts) != 2 or parts[0] != CB_MAIN:
             logger.warning(f"Invalid callback data format received in MAIN_MENU: {cq.data}")
             await edit_message_text(cq.message, _("‚ö†Ô∏è –ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –∑–∞–ø—Ä–æ—Å."))
             return MAIN_MENU
        cmd = parts[1]

        # --- –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–º–∞–Ω–¥ –º–µ–Ω—é ---
        if cmd == "new_eval":
            questionnaires = await get_active_questionnaires()
            if not questionnaires:
                 await edit_message_text(cq.message, _("‚ùå –ù–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –æ–ø—Ä–æ—Å–Ω–∏–∫–æ–≤ –¥–ª—è –ø—Ä–æ–≤–µ–¥–µ–Ω–∏—è –æ—Ü–µ–Ω–∫–∏."))
                 return MAIN_MENU
            context.user_data["eval_qsets"] = {str(q.id): q.name for q in questionnaires}
            buttons = [ [InlineKeyboardButton(name, callback_data=f"{CB_EVAL_QSET}:{qid}")] for qid, name in context.user_data["eval_qsets"].items() ] + [[InlineKeyboardButton(_("üîô –ù–∞–∑–∞–¥"), callback_data=f"{CB_MAIN}:back_main")]]
            await edit_message_text(cq.message, _("üìä *–ù–æ–≤–∞—è –æ—Ü–µ–Ω–∫–∞*\n–í—ã–±–µ—Ä–∏—Ç–µ —Ç–∏–ø –æ–ø—Ä–æ—Å–Ω–∏–∫–∞:"), reply_markup=InlineKeyboardMarkup(buttons), parse_mode=ParseMode.MARKDOWN)
            return EVAL_SELECT_QSET

        elif cmd == "show_depts":
            deps = await all_departments()
            if not deps: await edit_message_text(cq.message, _("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å —Å–ø–∏—Å–æ–∫ –æ—Ç–¥–µ–ª–æ–≤ –∏–ª–∏ –æ—Ç–¥–µ–ª—ã –æ—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç.")); return MAIN_MENU
            context.user_data["dept_list"] = {str(d.id): d.name for d in deps}; buttons = [ [InlineKeyboardButton(name, callback_data=f"{CB_DEPT}:{did}")] for did, name in list(context.user_data["dept_list"].items())[:15]] + [[InlineKeyboardButton(_("üîô –ù–∞–∑–∞–¥"), callback_data=f"{CB_MAIN}:back_main")]]
            if len(deps) > 15: buttons.insert(-1, [InlineKeyboardButton(_("... (–µ—â–µ –æ—Ç–¥–µ–ª—ã)"), callback_data=CB_NOOP)])
            await edit_message_text(cq.message, _("üìã *–û—Ç–¥–µ–ª—ã –∫–æ–º–ø–∞–Ω–∏–∏*"), reply_markup=InlineKeyboardMarkup(buttons), parse_mode=ParseMode.MARKDOWN); return DEPT_LIST

        elif cmd == "show_all_users":
            users = await all_users()
            if not users: await edit_message_text(cq.message, _("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å —Å–ø–∏—Å–æ–∫ —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–æ–≤ –∏–ª–∏ —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∏ –æ—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç.")); return MAIN_MENU
            context.user_data["all_users"] = {str(u.id): u.get_full_name() for u in users}; buttons = [ [InlineKeyboardButton(name, callback_data=f"{CB_USER}:{uid}")] for uid, name in list(context.user_data["all_users"].items())[:15]] + [[InlineKeyboardButton(_("üîô –ù–∞–∑–∞–¥"), callback_data=f"{CB_MAIN}:back_main")]]
            if len(users) > 15: buttons.insert(-1, [InlineKeyboardButton(_("... (–µ—â–µ —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∏)"), callback_data=CB_NOOP)])
            await edit_message_text(cq.message, _("üë• *–í—Å–µ —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∏*"), reply_markup=InlineKeyboardMarkup(buttons), parse_mode=ParseMode.MARKDOWN); return EMP_LIST

        elif cmd == "profile_settings":
            buttons = [ [InlineKeyboardButton(_("üì∏ –ó–∞–≥—Ä—É–∑–∏—Ç—å/—Å–º–µ–Ω–∏—Ç—å —Ñ–æ—Ç–æ"), callback_data=f"{CB_PROFILE}:photo")], [InlineKeyboardButton(_("‚úçÔ∏è –ò–∑–º–µ–Ω–∏—Ç—å –∏–º—è"), callback_data=f"{CB_PROFILE}:name")], [InlineKeyboardButton(_("üîô –ù–∞–∑–∞–¥"), callback_data=f"{CB_MAIN}:back_main")]]
            await edit_message_text(cq.message, _("‚öôÔ∏è *–ù–∞—Å—Ç—Ä–æ–π–∫–∏ –ø—Ä–æ—Ñ–∏–ª—è*"), reply_markup=InlineKeyboardMarkup(buttons), parse_mode=ParseMode.MARKDOWN); return PROFILE_MENU

        elif cmd == "choose_lang":
            lang_buttons = []
            # --- –ò–°–ü–†–ê–í–õ–ï–ù–û: –î–æ–±–∞–≤–ª–µ–Ω except —Å—Ä–∞–∑—É –ø–æ—Å–ª–µ try ---
            try:
                # current_lang = context.user_data.get('user_lang', settings.LANGUAGE_CODE) # –ü–æ–∫–∞ –Ω–µ –∏—Å–ø–æ–ª—å–∑—É–µ–º current_lang
                for code, name in settings.LANGUAGES:
                     lang_buttons.append(InlineKeyboardButton(name, callback_data=f"{CB_LANG}:{code}"))
            except Exception as lang_e: # –ü–µ—Ä–µ—Ö–≤–∞—Ç—ã–≤–∞–µ–º –æ—à–∏–±–∫—É –∑–¥–µ—Å—å
                logger.error(f"Error getting LANGUAGES from settings: {lang_e}")
                await edit_message_text(cq.message, _("‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö —è–∑—ã–∫–æ–≤."))
                return MAIN_MENU
            # ----------------------------------------------------

            buttons = [[btn] for btn in lang_buttons]
            buttons.append([InlineKeyboardButton(_("üîô –ù–∞–∑–∞–¥"), callback_data=f"{CB_MAIN}:back_main")])

            await edit_message_text(cq.message, _("üåê *–í—ã–±–µ—Ä–∏—Ç–µ —è–∑—ã–∫ –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞*"), reply_markup=InlineKeyboardMarkup(buttons), parse_mode=ParseMode.MARKDOWN)
            return LANG_MENU

        elif cmd == "search_emp": await edit_message_text(cq.message, _("üîé –í–≤–µ–¥–∏—Ç–µ —á–∞—Å—Ç—å –∏–º–µ–Ω–∏, —Ñ–∞–º–∏–ª–∏–∏, —Ç–µ–ª–µ—Ñ–æ–Ω–∞ –∏–ª–∏ email –¥–ª—è –ø–æ–∏—Å–∫–∞ —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∞:"), reply_markup=None); return SEARCH_INPUT
        elif cmd == "stop": await edit_message_text(cq.message, _("‚úã –î–∏–∞–ª–æ–≥ –∑–∞–≤–µ—Ä—à–µ–Ω.")); context.user_data.clear(); return ConversationHandler.END
        elif cmd == "back_main": return await start(update, context)
        else: logger.warning(f"Unknown command '{cmd}' received in MAIN_MENU."); await edit_message_text(cq.message, _("‚ö†Ô∏è –ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –∫–æ–º–∞–Ω–¥–∞.")); return MAIN_MENU

    except (BadRequest, NetworkError, TimedOut) as e: logger.warning(f"Network/API error in main_menu_cb: {e}"); await reply_text(update, _("‚ö†Ô∏è –û—à–∏–±–∫–∞ —Å–µ—Ç–∏ –∏–ª–∏ API. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.")); return MAIN_MENU
    except Exception as e: logger.exception(f"Unexpected error in main_menu_cb: {e}"); await reply_text(update, _("‚ö†Ô∏è –ü—Ä–æ–∏–∑–æ—à–ª–∞ –≤–Ω—É—Ç—Ä–µ–Ω–Ω—è—è –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ /start")); return ConversationHandler.END


# --- /stop and Fallback Handlers ---
async def stop_conversation(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    """–ó–∞–≤–µ—Ä—à–∞–µ—Ç —Ç–µ–∫—É—â–∏–π –¥–∏–∞–ª–æ–≥ ConversationHandler."""
    user_id = update.effective_user.id if update.effective_user else "Unknown"; logger.info(f"Stopping conversation for user {user_id}")
    context.user_data.clear(); message_text = _("‚úã –û–ø–µ—Ä–∞—Ü–∏—è –ø—Ä–µ—Ä–≤–∞–Ω–∞."); next_state = ConversationHandler.END
    if update.message: await reply_text(update, message_text)
    elif update.callback_query:
        try: await update.callback_query.answer(); await edit_message_text(update.callback_query.message, message_text)
        except BadRequest: pass
    else: logger.warning("stop_conversation called without message or callback_query.")
    return next_state

async def unexpected_input_handler(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –ª—é–±–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ/callback, –Ω–µ –ø–æ–π–º–∞–Ω–Ω–æ–µ –¥—Ä—É–≥–∏–º–∏ —Ö–µ–Ω–¥–ª–µ—Ä–∞–º–∏ –≤ ConversationHandler."""
    user_id = update.effective_user.id if update.effective_user else "Unknown"; current_state = context.user_data.get(ConversationHandler.CURRENT_STATE)
    text = _("–ù–µ–æ–∂–∏–¥–∞–Ω–Ω—ã–π –≤–≤–æ–¥.")
    if update.message: logger.debug(f"Unhandled message received from user {user_id} in state {current_state}: '{update.message.text}'"); text = _("–ù–µ–æ–∂–∏–¥–∞–Ω–Ω—ã–π –≤–≤–æ–¥. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–Ω–æ–ø–∫–∏ –∏–ª–∏ –∫–æ–º–∞–Ω–¥—É /stop."); await reply_text(update, text)
    elif update.callback_query:
         logger.debug(f"Unhandled callback_query received from user {user_id} in state {current_state}: '{update.callback_query.data}'")
         try: await update.callback_query.answer(_("–î–µ–π—Å—Ç–≤–∏–µ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–æ."), show_alert=True)
         except BadRequest: pass
         return
    else: logger.warning(f"unexpected_input_handler triggered by unknown update type from user {user_id} in state {current_state}")