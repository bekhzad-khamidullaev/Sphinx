# hrbot/models.py

from django.db import models
from django.utils.translation import gettext_lazy as _
from django.conf import settings # –ò—Å–ø–æ–ª—å–∑—É–µ–º settings.AUTH_USER_MODEL
import logging

# –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º User –∏ Role –∏–∑ user_profiles (—É–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ –ø—É—Ç—å –≤–µ—Ä–Ω—ã–π)
try:
    from user_profiles.models import User, Role, Department
except ImportError:
     # –≠—Ç–∞ –æ—à–∏–±–∫–∞ –∫—Ä–∏—Ç–∏—á–Ω–∞, –±–æ—Ç –Ω–µ —Å–º–æ–∂–µ—Ç —Ä–∞–±–æ—Ç–∞—Ç—å –±–µ–∑ –º–æ–¥–µ–ª–µ–π User/Role/Department
     logging.critical("Could not import User, Role, Department from user_profiles.models. Check app dependencies and model definitions.")
     raise ImportError("Could not import User, Role, Department from user_profiles.models.")


logger = logging.getLogger(__name__)

# --- Questionnaire Model ---
class Questionnaire(models.Model):
    """Represents a set of questions for a specific type of evaluation."""
    name = models.CharField(max_length=150, unique=True, verbose_name=_("–ù–∞–∑–≤–∞–Ω–∏–µ –æ–ø—Ä–æ—Å–Ω–∏–∫–∞"))
    description = models.TextField(blank=True, verbose_name=_("–û–ø–∏—Å–∞–Ω–∏–µ"))
    is_active = models.BooleanField(default=True, verbose_name=_("–ê–∫—Ç–∏–≤–µ–Ω"), help_text=_("–ê–∫—Ç–∏–≤–Ω—ã–µ –æ–ø—Ä–æ—Å–Ω–∏–∫–∏ –¥–æ—Å—Ç—É–ø–Ω—ã –¥–ª—è –≤—ã–±–æ—Ä–∞ –ø—Ä–∏ –æ—Ü–µ–Ω–∫–µ."))
    created_at = models.DateTimeField(auto_now_add=True)
    updated_at = models.DateTimeField(auto_now=True)

    class Meta:
        verbose_name = _("–û–ø—Ä–æ—Å–Ω–∏–∫")
        verbose_name_plural = _("–û–ø—Ä–æ—Å–Ω–∏–∫–∏")
        ordering = ['name']

    def __str__(self):
        return self.name

# --- TelegramUser Model ---
class TelegramUser(models.Model):
    user = models.OneToOneField(
        settings.AUTH_USER_MODEL, # –ò—Å–ø–æ–ª—å–∑—É–µ–º –Ω–∞—Å—Ç—Ä–æ–π–∫—É Django
        on_delete=models.CASCADE,
        related_name='telegram_profile',
        verbose_name=_("–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å Django")
    )
    telegram_id = models.CharField(max_length=20, unique=True, db_index=True, verbose_name=_("Telegram ID"))
    approved = models.BooleanField(default=False, verbose_name=_("–ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω"))
    notified_on_approval = models.BooleanField(default=False, verbose_name=_("–£–≤–µ–¥–æ–º–ª–µ–Ω –æ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–∏"))

    class Meta:
        verbose_name = _("Telegram –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å")
        verbose_name_plural = _("Telegram –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏")

    def __str__(self):
        approved_status = "‚úÖ" if self.approved else "‚è≥"
        notified_status = "üì®" if self.notified_on_approval else ""
        # –ü—ã—Ç–∞–µ–º—Å—è –ø–æ–ª—É—á–∏—Ç—å username –±–µ–∑–æ–ø–∞—Å–Ω–æ
        username = "N/A"
        try:
             if self.user:
                 username = self.user.username
        except User.DoesNotExist: # –û–±—Ä–∞–±–æ—Ç–∫–∞ —Å–ª—É—á–∞—è, –µ—Å–ª–∏ user —É–¥–∞–ª–µ–Ω (—Ö–æ—Ç—è on_delete=CASCADE)
             logger.warning(f"User for TelegramUser {self.pk} not found.")
        except Exception as e:
             logger.error(f"Error accessing user for TelegramUser {self.pk}: {e}")

        return f"{username} ({self.telegram_id}) {approved_status}{notified_status}"

# --- Question Model ---
class Question(models.Model):
    questionnaire = models.ForeignKey(Questionnaire, on_delete=models.CASCADE, related_name='questions', verbose_name=_("–û–ø—Ä–æ—Å–Ω–∏–∫"))
    text = models.CharField(max_length=255, verbose_name=_("–¢–µ–∫—Å—Ç –≤–æ–ø—Ä–æ—Å–∞"))
    order = models.PositiveIntegerField(default=1, verbose_name=_("–ü–æ—Ä—è–¥–æ–∫"))
    # –ò—Å–ø–æ–ª—å–∑—É–µ–º JSONField –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è –≤–∞—Ä–∏–∞–Ω—Ç–æ–≤ –æ—Ç–≤–µ—Ç–∞
    # –≠—Ç–æ –º–æ–∂–µ—Ç –±—ã—Ç—å —Å–ø–∏—Å–æ–∫ —Å—Ç—Ä–æ–∫, –Ω–∞–ø—Ä–∏–º–µ—Ä ["–î–∞", "–ù–µ—Ç", "–ó–∞—Ç—Ä—É–¥–Ω—è—é—Å—å –æ—Ç–≤–µ—Ç–∏—Ç—å"]
    answer_options = models.JSONField(
        null=True,
        blank=True,
        verbose_name=_("–í–∞—Ä–∏–∞–Ω—Ç—ã –æ—Ç–≤–µ—Ç–∞ (JSON list)"),
        help_text=_('–°–ø–∏—Å–æ–∫ —Å—Ç—Ä–æ–∫ —Å –≤–∞—Ä–∏–∞–Ω—Ç–∞–º–∏ –æ—Ç–≤–µ—Ç–∞, –Ω–∞–ø—Ä–∏–º–µ—Ä ["–î–∞", "–ù–µ—Ç", "–ó–∞—Ç—Ä—É–¥–Ω—è—é—Å—å –æ—Ç–≤–µ—Ç–∏—Ç—å"] –∏–ª–∏ ["1", "2", "3", "4", "5"]. –û—Å—Ç–∞–≤—å—Ç–µ –ø—É—Å—Ç—ã–º –¥–ª—è —Å–≤–æ–±–æ–¥–Ω–æ–≥–æ –æ—Ç–≤–µ—Ç–∞.')
    )

    class Meta:
        ordering = ['questionnaire', 'order']
        verbose_name = _("–í–æ–ø—Ä–æ—Å")
        verbose_name_plural = _("–í–æ–ø—Ä–æ—Å—ã")
        indexes = [ models.Index(fields=['questionnaire', 'order']), ]

    def __str__(self):
        q_name = getattr(self.questionnaire, 'name', 'N/A')
        options_mark = "[Btn]" if self.answer_options else "[Txt]"
        return f"{q_name}: ({self.order}) {self.text[:60]}... {options_mark}"

# --- Evaluation Model ---
class Evaluation(models.Model):
    evaluator = models.ForeignKey(
        TelegramUser,
        on_delete=models.CASCADE, # –ï—Å–ª–∏ —É–¥–∞–ª—è–µ—Ç—Å—è –¢–ì-—é–∑–µ—Ä, –µ–≥–æ –æ—Ü–µ–Ω–∫–∏ —É–¥–∞–ª—è—é—Ç—Å—è
        related_name='evaluations_given',
        verbose_name=_("–û—Ü–µ–Ω—â–∏–∫ (TG User)")
    )
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∏–º—è –Ω–∞ –º–æ–º–µ–Ω—Ç –æ—Ü–µ–Ω–∫–∏
    employee_name = models.CharField(max_length=100, verbose_name=_("–ò–º—è –æ—Ü–µ–Ω–∏–≤–∞–µ–º–æ–≥–æ (—Ç–µ–∫—Å—Ç)"))
    # –û–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–∞—è —Å—Å—ã–ª–∫–∞ –Ω–∞ –æ–±—ä–µ–∫—Ç User –æ—Ü–µ–Ω–∏–≤–∞–µ–º–æ–≥–æ
    employee = models.ForeignKey(
        settings.AUTH_USER_MODEL,
        on_delete=models.SET_NULL, # –°–æ—Ö—Ä–∞–Ω—è–µ–º –æ—Ü–µ–Ω–∫—É, –¥–∞–∂–µ –µ—Å–ª–∏ —é–∑–µ—Ä —É–¥–∞–ª–µ–Ω
        null=True,
        blank=True,
        related_name='evaluated_in',
        verbose_name=_("–°–æ—Ç—Ä—É–¥–Ω–∏–∫ (–æ–±—ä–µ–∫—Ç User)")
    )
    # –°—Å—ã–ª–∫–∞ –Ω–∞ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–Ω—ã–π –æ–ø—Ä–æ—Å–Ω–∏–∫
    questionnaire = models.ForeignKey(
        Questionnaire,
        on_delete=models.PROTECT, # –ó–∞—â–∏—â–∞–µ–º –æ—Ç —É–¥–∞–ª–µ–Ω–∏—è –æ–ø—Ä–æ—Å–Ω–∏–∫–∏, –ø–æ –∫–æ—Ç–æ—Ä—ã–º –µ—Å—Ç—å –æ—Ü–µ–Ω–∫–∏
        related_name='evaluations',
        verbose_name=_("–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–Ω—ã–π –æ–ø—Ä–æ—Å–Ω–∏–∫")
    )
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ä–æ–ª—å –¥–ª—è –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞/–æ—Ç—á–µ—Ç–Ω–æ—Å—Ç–∏
    role = models.ForeignKey(
        Role,
        on_delete=models.SET_NULL, # –°–æ—Ö—Ä–∞–Ω—è–µ–º –æ—Ü–µ–Ω–∫—É, –¥–∞–∂–µ –µ—Å–ª–∏ —Ä–æ–ª—å —É–¥–∞–ª–µ–Ω–∞
        null=True,
        blank=True, # –†–æ–ª—å –º–æ–∂–µ—Ç –±—ã—Ç—å –Ω–µ –≤—Å–µ–≥–¥–∞ –ø—Ä–∏–º–µ–Ω–∏–º–∞
        related_name='evaluations_in_role',
        verbose_name=_("–†–æ–ª—å (–∫–æ–Ω—Ç–µ–∫—Å—Ç)")
    )
    # –û—Ç–≤–µ—Ç—ã –≤ —Ñ–æ—Ä–º–∞—Ç–µ JSON: {'question_id_str': 'answer_text', ...}
    responses = models.JSONField(verbose_name=_("–û—Ç–≤–µ—Ç—ã (ID –≤–æ–ø—Ä–æ—Å–∞ -> –æ—Ç–≤–µ—Ç)"))
    timestamp = models.DateTimeField(auto_now_add=True, verbose_name=_("–í—Ä–µ–º—è –æ—Ü–µ–Ω–∫–∏"))

    class Meta:
        ordering = ['-timestamp']
        verbose_name = _("–û—Ü–µ–Ω–∫–∞")
        verbose_name_plural = _("–û—Ü–µ–Ω–∫–∏")
        indexes = [
            models.Index(fields=['-timestamp']),
            models.Index(fields=['evaluator']),
            models.Index(fields=['employee']),
            models.Index(fields=['questionnaire']),
            models.Index(fields=['role']),
        ]

    def __str__(self):
        evaluator_name = self.get_evaluator_name() or f"TG User {self.evaluator_id}"
        q_name = self.questionnaire.name if self.questionnaire else "N/A"
        role_name = f" ({self.role.name})" if self.role else ""
        return f"–û—Ü–µ–Ω–∫–∞ {self.employee_name}{role_name} ({q_name}) –æ—Ç {evaluator_name}"

    # --- –í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω—ã–µ –º–µ—Ç–æ–¥—ã ---
    def get_evaluator_name(self):
        """–ë–µ–∑–æ–ø–∞—Å–Ω–æ –ø–æ–ª—É—á–∞–µ—Ç –ø–æ–ª–Ω–æ–µ –∏–º—è –æ—Ü–µ–Ω—â–∏–∫–∞."""
        try:
            if self.evaluator and self.evaluator.user:
                return self.evaluator.user.get_full_name()
        except User.DoesNotExist:
            logger.warning(f"User for evaluator (TelegramUser {self.evaluator_id}) not found in Evaluation {self.pk}")
        except Exception as e:
            logger.error(f"Error getting evaluator name for Evaluation {self.pk}: {e}")
        return None

    def get_evaluator_telegram_id(self):
        """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç Telegram ID –æ—Ü–µ–Ω—â–∏–∫–∞."""
        return self.evaluator.telegram_id if self.evaluator else None

    def get_questionnaire_name(self):
        """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –Ω–∞–∑–≤–∞–Ω–∏–µ –æ–ø—Ä–æ—Å–Ω–∏–∫–∞."""
        return self.questionnaire.name if self.questionnaire else None

    def get_role_name(self):
        """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –Ω–∞–∑–≤–∞–Ω–∏–µ —Ä–æ–ª–∏ (–µ—Å–ª–∏ –µ—Å—Ç—å)."""
        return self.role.name if self.role else None

    def get_formatted_responses(self) -> dict | None:
        """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –æ—Ç–≤–µ—Ç—ã —Å —Ç–µ–∫—Å—Ç–∞–º–∏ –≤–æ–ø—Ä–æ—Å–æ–≤ (—Ç—Ä–µ–±—É–µ—Ç –¥–æ–ø. –∑–∞–ø—Ä–æ—Å–∞)."""
        if not isinstance(self.responses, dict):
            return None
        try:
            question_ids = [int(qid) for qid in self.responses.keys() if qid.isdigit()]
            questions = Question.objects.in_bulk(question_ids)
            formatted = {}
            for qid_str, answer in self.responses.items():
                qid = int(qid_str) if qid_str.isdigit() else None
                question_obj = questions.get(qid)
                question_text = question_obj.text if question_obj else f"–í–æ–ø—Ä–æ—Å ID {qid_str} (–Ω–µ –Ω–∞–π–¥–µ–Ω)"
                formatted[question_text] = answer
            return formatted
        except Exception as e:
            logger.exception(f"Error formatting responses for Evaluation {self.pk}: {e}")
            return self.responses # –í–æ–∑–≤—Ä–∞—â–∞–µ–º —Å—ã—Ä—ã–µ –¥–∞–Ω–Ω—ã–µ –ø—Ä–∏ –æ—à–∏–±–∫–µ