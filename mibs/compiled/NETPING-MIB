# SNMP MIB module (NETPING-MIB) expressed in pysnmp data model.
#
# This Python module is designed to be imported and executed by the
# pysnmp library.
#
# See https://www.pysnmp.com/pysnmp for further information.
#
# Notes
# -----
# ASN.1 source file:///usr/share/snmp/mibs/ietf/NETPING-MIB.mib
# Produced by pysmi-1.4.3 at Sun Aug 18 01:13:32 2024
# On host toswtich platform Linux version 5.15.0-112-generic by user bekhzad
# Using Python version 3.10.12 (main, Jul 29 2024, 16:56:48) [GCC 11.4.0]

if 'mibBuilder' not in globals():
    import sys

    sys.stderr.write(__doc__)
    sys.exit(1)

# Import base ASN.1 objects even if this MIB does not use it

(Integer,
 OctetString,
 ObjectIdentifier) = mibBuilder.importSymbols(
    "ASN1",
    "Integer",
    "OctetString",
    "ObjectIdentifier")

(NamedValues,) = mibBuilder.importSymbols(
    "ASN1-ENUMERATION",
    "NamedValues")
(ConstraintsIntersection,
 SingleValueConstraint,
 ValueRangeConstraint,
 ValueSizeConstraint,
 ConstraintsUnion) = mibBuilder.importSymbols(
    "ASN1-REFINEMENT",
    "ConstraintsIntersection",
    "SingleValueConstraint",
    "ValueRangeConstraint",
    "ValueSizeConstraint",
    "ConstraintsUnion")

# Import SMI symbols from the MIBs this MIB depends on

(ModuleCompliance,
 NotificationGroup) = mibBuilder.importSymbols(
    "SNMPv2-CONF",
    "ModuleCompliance",
    "NotificationGroup")

(snmpTraps,) = mibBuilder.importSymbols(
    "SNMPv2-MIB",
    "snmpTraps")

(ObjectIdentity,
 iso,
 ModuleIdentity,
 Counter32,
 enterprises,
 MibScalar,
 MibTable,
 MibTableRow,
 MibTableColumn,
 TimeTicks,
 Gauge32,
 Unsigned32,
 MibIdentifier,
 Counter64,
 IpAddress,
 NotificationType,
 Bits,
 Integer32) = mibBuilder.importSymbols(
    "SNMPv2-SMI",
    "ObjectIdentity",
    "iso",
    "ModuleIdentity",
    "Counter32",
    "enterprises",
    "MibScalar",
    "MibTable",
    "MibTableRow",
    "MibTableColumn",
    "TimeTicks",
    "Gauge32",
    "Unsigned32",
    "MibIdentifier",
    "Counter64",
    "IpAddress",
    "NotificationType",
    "Bits",
    "Integer32")

(DisplayString,
 TextualConvention) = mibBuilder.importSymbols(
    "SNMPv2-TC",
    "DisplayString",
    "TextualConvention")


# MODULE-IDENTITY

netPingServerSolutionV5noGsm = ModuleIdentity(
    (1, 3, 6, 1, 4, 1, 25728, 73)
)
netPingServerSolutionV5noGsm.setRevisions(
        ("2021-02-19 00:00",)
)


# Types definitions


# TEXTUAL-CONVENTIONS



class FixedPoint1000(TextualConvention, Integer32):
    status = "current"
    displayHint = "d-3"


# MIB Managed Objects in the order of their OIDs

_Lightcom_ObjectIdentity = ObjectIdentity
lightcom = _Lightcom_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 25728)
)
_NpReboot_ObjectIdentity = ObjectIdentity
npReboot = _NpReboot_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 25728, 911)
)
_NpSoftReboot_Type = Integer32
_NpSoftReboot_Object = MibScalar
npSoftReboot = _NpSoftReboot_Object(
    (1, 3, 6, 1, 4, 1, 25728, 911, 1),
    _NpSoftReboot_Type()
)
npSoftReboot.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    npSoftReboot.setStatus("current")
_NpResetStack_Type = Integer32
_NpResetStack_Object = MibScalar
npResetStack = _NpResetStack_Object(
    (1, 3, 6, 1, 4, 1, 25728, 911, 2),
    _NpResetStack_Type()
)
npResetStack.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    npResetStack.setStatus("current")
_NpForcedReboot_Type = Integer32
_NpForcedReboot_Object = MibScalar
npForcedReboot = _NpForcedReboot_Object(
    (1, 3, 6, 1, 4, 1, 25728, 911, 3),
    _NpForcedReboot_Type()
)
npForcedReboot.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    npForcedReboot.setStatus("current")
_NpRelay_ObjectIdentity = ObjectIdentity
npRelay = _NpRelay_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 25728, 5500)
)
_NpRelayTrapData_ObjectIdentity = ObjectIdentity
npRelayTrapData = _NpRelayTrapData_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 25728, 5500, 3)
)


class _NpRelayTrapN_Type(Integer32):
    """Custom type npRelayTrapN based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(1, 2),
    )


_NpRelayTrapN_Type.__name__ = "Integer32"
_NpRelayTrapN_Object = MibScalar
npRelayTrapN = _NpRelayTrapN_Object(
    (1, 3, 6, 1, 4, 1, 25728, 5500, 3, 1),
    _NpRelayTrapN_Type()
)
npRelayTrapN.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    npRelayTrapN.setStatus("current")


class _NpRelayTrapMode_Type(Integer32):
    """Custom type npRelayTrapMode based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(0,
              1)
        )
    )
    namedValues = NamedValues(
        *(("off", 0),
          ("on", 1))
    )


_NpRelayTrapMode_Type.__name__ = "Integer32"
_NpRelayTrapMode_Object = MibScalar
npRelayTrapMode = _NpRelayTrapMode_Object(
    (1, 3, 6, 1, 4, 1, 25728, 5500, 3, 2),
    _NpRelayTrapMode_Type()
)
npRelayTrapMode.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    npRelayTrapMode.setStatus("current")
_NpRelayTrapMemo_Type = DisplayString
_NpRelayTrapMemo_Object = MibScalar
npRelayTrapMemo = _NpRelayTrapMemo_Object(
    (1, 3, 6, 1, 4, 1, 25728, 5500, 3, 6),
    _NpRelayTrapMemo_Type()
)
npRelayTrapMemo.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    npRelayTrapMemo.setStatus("current")


class _NpRelayTrapState_Type(Integer32):
    """Custom type npRelayTrapState based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(0,
              1)
        )
    )
    namedValues = NamedValues(
        *(("off", 0),
          ("on", 1))
    )


_NpRelayTrapState_Type.__name__ = "Integer32"
_NpRelayTrapState_Object = MibScalar
npRelayTrapState = _NpRelayTrapState_Object(
    (1, 3, 6, 1, 4, 1, 25728, 5500, 3, 15),
    _NpRelayTrapState_Type()
)
npRelayTrapState.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    npRelayTrapState.setStatus("current")


class _NpRelayTrapCmdSrc_Type(Integer32):
    """Custom type npRelayTrapCmdSrc based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(-1,
              1,
              2,
              3,
              4,
              5,
              6,
              7)
        )
    )
    namedValues = NamedValues(
        *(("httpApi", 4),
          ("logic", 7),
          ("schedule", 6),
          ("sms", 3),
          ("snmp", 2),
          ("unknown", -1),
          ("watchdog", 5),
          ("webInterface", 1))
    )


_NpRelayTrapCmdSrc_Type.__name__ = "Integer32"
_NpRelayTrapCmdSrc_Object = MibScalar
npRelayTrapCmdSrc = _NpRelayTrapCmdSrc_Object(
    (1, 3, 6, 1, 4, 1, 25728, 5500, 3, 18),
    _NpRelayTrapCmdSrc_Type()
)
npRelayTrapCmdSrc.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    npRelayTrapCmdSrc.setStatus("current")
_NpRelayTrapDateTime_Type = DisplayString
_NpRelayTrapDateTime_Object = MibScalar
npRelayTrapDateTime = _NpRelayTrapDateTime_Object(
    (1, 3, 6, 1, 4, 1, 25728, 5500, 3, 19),
    _NpRelayTrapDateTime_Type()
)
npRelayTrapDateTime.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    npRelayTrapDateTime.setStatus("current")
_NpRelayTable_Object = MibTable
npRelayTable = _NpRelayTable_Object(
    (1, 3, 6, 1, 4, 1, 25728, 5500, 5)
)
if mibBuilder.loadTexts:
    npRelayTable.setStatus("current")
_NpRelayEntry_Object = MibTableRow
npRelayEntry = _NpRelayEntry_Object(
    (1, 3, 6, 1, 4, 1, 25728, 5500, 5, 1)
)
npRelayEntry.setIndexNames(
    (0, "NETPING-MIB", "npRelayN"),
)
if mibBuilder.loadTexts:
    npRelayEntry.setStatus("current")


class _NpRelayN_Type(Integer32):
    """Custom type npRelayN based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(1, 2),
    )


_NpRelayN_Type.__name__ = "Integer32"
_NpRelayN_Object = MibTableColumn
npRelayN = _NpRelayN_Object(
    (1, 3, 6, 1, 4, 1, 25728, 5500, 5, 1, 1),
    _NpRelayN_Type()
)
npRelayN.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    npRelayN.setStatus("current")


class _NpRelayMode_Type(Integer32):
    """Custom type npRelayMode based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(-1,
              0,
              1)
        )
    )
    namedValues = NamedValues(
        *(("flip", -1),
          ("off", 0),
          ("on", 1))
    )


_NpRelayMode_Type.__name__ = "Integer32"
_NpRelayMode_Object = MibTableColumn
npRelayMode = _NpRelayMode_Object(
    (1, 3, 6, 1, 4, 1, 25728, 5500, 5, 1, 2),
    _NpRelayMode_Type()
)
npRelayMode.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    npRelayMode.setStatus("current")
_NpRelayStartReset_Type = Integer32
_NpRelayStartReset_Object = MibTableColumn
npRelayStartReset = _NpRelayStartReset_Object(
    (1, 3, 6, 1, 4, 1, 25728, 5500, 5, 1, 3),
    _NpRelayStartReset_Type()
)
npRelayStartReset.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    npRelayStartReset.setStatus("current")
_NpRelayMemo_Type = DisplayString
_NpRelayMemo_Object = MibTableColumn
npRelayMemo = _NpRelayMemo_Object(
    (1, 3, 6, 1, 4, 1, 25728, 5500, 5, 1, 6),
    _NpRelayMemo_Type()
)
npRelayMemo.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    npRelayMemo.setStatus("current")


class _NpRelayFlip_Type(Integer32):
    """Custom type npRelayFlip based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            -1
        )
    )
    namedValues = NamedValues(
        ("flip", -1)
    )


_NpRelayFlip_Type.__name__ = "Integer32"
_NpRelayFlip_Object = MibTableColumn
npRelayFlip = _NpRelayFlip_Object(
    (1, 3, 6, 1, 4, 1, 25728, 5500, 5, 1, 14),
    _NpRelayFlip_Type()
)
npRelayFlip.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    npRelayFlip.setStatus("current")


class _NpRelayState_Type(Integer32):
    """Custom type npRelayState based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(0,
              1)
        )
    )
    namedValues = NamedValues(
        *(("off", 0),
          ("on", 1))
    )


_NpRelayState_Type.__name__ = "Integer32"
_NpRelayState_Object = MibTableColumn
npRelayState = _NpRelayState_Object(
    (1, 3, 6, 1, 4, 1, 25728, 5500, 5, 1, 15),
    _NpRelayState_Type()
)
npRelayState.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    npRelayState.setStatus("current")
_NpRelayTrap_ObjectIdentity = ObjectIdentity
npRelayTrap = _NpRelayTrap_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 25728, 5500, 6)
)
_NpRelayTrapAllEvents_ObjectIdentity = ObjectIdentity
npRelayTrapAllEvents = _NpRelayTrapAllEvents_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 25728, 5500, 6, 127)
)
_NpExtRelay_ObjectIdentity = ObjectIdentity
npExtRelay = _NpExtRelay_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 25728, 5600)
)
_NpExtRelayTrapData_ObjectIdentity = ObjectIdentity
npExtRelayTrapData = _NpExtRelayTrapData_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 25728, 5600, 3)
)


class _NpExtRelayTrapN_Type(Integer32):
    """Custom type npExtRelayTrapN based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(1, 8),
    )


_NpExtRelayTrapN_Type.__name__ = "Integer32"
_NpExtRelayTrapN_Object = MibScalar
npExtRelayTrapN = _NpExtRelayTrapN_Object(
    (1, 3, 6, 1, 4, 1, 25728, 5600, 3, 1),
    _NpExtRelayTrapN_Type()
)
npExtRelayTrapN.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    npExtRelayTrapN.setStatus("current")


class _NpExtRelayTrapMode_Type(Integer32):
    """Custom type npExtRelayTrapMode based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(0,
              1)
        )
    )
    namedValues = NamedValues(
        *(("off", 0),
          ("on", 1))
    )


_NpExtRelayTrapMode_Type.__name__ = "Integer32"
_NpExtRelayTrapMode_Object = MibScalar
npExtRelayTrapMode = _NpExtRelayTrapMode_Object(
    (1, 3, 6, 1, 4, 1, 25728, 5600, 3, 2),
    _NpExtRelayTrapMode_Type()
)
npExtRelayTrapMode.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    npExtRelayTrapMode.setStatus("current")
_NpExtRelayTrapMemo_Type = DisplayString
_NpExtRelayTrapMemo_Object = MibScalar
npExtRelayTrapMemo = _NpExtRelayTrapMemo_Object(
    (1, 3, 6, 1, 4, 1, 25728, 5600, 3, 6),
    _NpExtRelayTrapMemo_Type()
)
npExtRelayTrapMemo.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    npExtRelayTrapMemo.setStatus("current")


class _NpExtRelayTrapState_Type(Integer32):
    """Custom type npExtRelayTrapState based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(0,
              1)
        )
    )
    namedValues = NamedValues(
        *(("off", 0),
          ("on", 1))
    )


_NpExtRelayTrapState_Type.__name__ = "Integer32"
_NpExtRelayTrapState_Object = MibScalar
npExtRelayTrapState = _NpExtRelayTrapState_Object(
    (1, 3, 6, 1, 4, 1, 25728, 5600, 3, 15),
    _NpExtRelayTrapState_Type()
)
npExtRelayTrapState.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    npExtRelayTrapState.setStatus("current")


class _NpExtRelayTrapCmdSrc_Type(Integer32):
    """Custom type npExtRelayTrapCmdSrc based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(-1,
              1,
              2,
              3,
              4,
              5,
              6,
              7,
              8)
        )
    )
    namedValues = NamedValues(
        *(("button", 8),
          ("httpApi", 4),
          ("logic", 7),
          ("schedule", 6),
          ("sms", 3),
          ("snmp", 2),
          ("unknown", -1),
          ("watchdog", 5),
          ("webInterface", 1))
    )


_NpExtRelayTrapCmdSrc_Type.__name__ = "Integer32"
_NpExtRelayTrapCmdSrc_Object = MibScalar
npExtRelayTrapCmdSrc = _NpExtRelayTrapCmdSrc_Object(
    (1, 3, 6, 1, 4, 1, 25728, 5600, 3, 18),
    _NpExtRelayTrapCmdSrc_Type()
)
npExtRelayTrapCmdSrc.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    npExtRelayTrapCmdSrc.setStatus("current")
_NpExtRelayTrapDateTime_Type = DisplayString
_NpExtRelayTrapDateTime_Object = MibScalar
npExtRelayTrapDateTime = _NpExtRelayTrapDateTime_Object(
    (1, 3, 6, 1, 4, 1, 25728, 5600, 3, 19),
    _NpExtRelayTrapDateTime_Type()
)
npExtRelayTrapDateTime.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    npExtRelayTrapDateTime.setStatus("current")
_NpExtRelayTable_Object = MibTable
npExtRelayTable = _NpExtRelayTable_Object(
    (1, 3, 6, 1, 4, 1, 25728, 5600, 5)
)
if mibBuilder.loadTexts:
    npExtRelayTable.setStatus("current")
_NpExtRelayEntry_Object = MibTableRow
npExtRelayEntry = _NpExtRelayEntry_Object(
    (1, 3, 6, 1, 4, 1, 25728, 5600, 5, 1)
)
npExtRelayEntry.setIndexNames(
    (0, "NETPING-MIB", "npExtRelayN"),
)
if mibBuilder.loadTexts:
    npExtRelayEntry.setStatus("current")


class _NpExtRelayN_Type(Integer32):
    """Custom type npExtRelayN based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(1, 8),
    )


_NpExtRelayN_Type.__name__ = "Integer32"
_NpExtRelayN_Object = MibTableColumn
npExtRelayN = _NpExtRelayN_Object(
    (1, 3, 6, 1, 4, 1, 25728, 5600, 5, 1, 1),
    _NpExtRelayN_Type()
)
npExtRelayN.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    npExtRelayN.setStatus("current")


class _NpExtRelayMode_Type(Integer32):
    """Custom type npExtRelayMode based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(-1,
              0,
              1)
        )
    )
    namedValues = NamedValues(
        *(("flip", -1),
          ("off", 0),
          ("on", 1))
    )


_NpExtRelayMode_Type.__name__ = "Integer32"
_NpExtRelayMode_Object = MibTableColumn
npExtRelayMode = _NpExtRelayMode_Object(
    (1, 3, 6, 1, 4, 1, 25728, 5600, 5, 1, 2),
    _NpExtRelayMode_Type()
)
npExtRelayMode.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    npExtRelayMode.setStatus("current")
_NpExtRelayStartReset_Type = Integer32
_NpExtRelayStartReset_Object = MibTableColumn
npExtRelayStartReset = _NpExtRelayStartReset_Object(
    (1, 3, 6, 1, 4, 1, 25728, 5600, 5, 1, 3),
    _NpExtRelayStartReset_Type()
)
npExtRelayStartReset.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    npExtRelayStartReset.setStatus("current")
_NpExtRelayMemo_Type = DisplayString
_NpExtRelayMemo_Object = MibTableColumn
npExtRelayMemo = _NpExtRelayMemo_Object(
    (1, 3, 6, 1, 4, 1, 25728, 5600, 5, 1, 6),
    _NpExtRelayMemo_Type()
)
npExtRelayMemo.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    npExtRelayMemo.setStatus("current")


class _NpExtRelayFlip_Type(Integer32):
    """Custom type npExtRelayFlip based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            -1
        )
    )
    namedValues = NamedValues(
        ("flip", -1)
    )


_NpExtRelayFlip_Type.__name__ = "Integer32"
_NpExtRelayFlip_Object = MibTableColumn
npExtRelayFlip = _NpExtRelayFlip_Object(
    (1, 3, 6, 1, 4, 1, 25728, 5600, 5, 1, 14),
    _NpExtRelayFlip_Type()
)
npExtRelayFlip.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    npExtRelayFlip.setStatus("current")


class _NpExtRelayState_Type(Integer32):
    """Custom type npExtRelayState based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(0,
              1)
        )
    )
    namedValues = NamedValues(
        *(("off", 0),
          ("on", 1))
    )


_NpExtRelayState_Type.__name__ = "Integer32"
_NpExtRelayState_Object = MibTableColumn
npExtRelayState = _NpExtRelayState_Object(
    (1, 3, 6, 1, 4, 1, 25728, 5600, 5, 1, 15),
    _NpExtRelayState_Type()
)
npExtRelayState.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    npExtRelayState.setStatus("current")
_NpExtRelayTrap_ObjectIdentity = ObjectIdentity
npExtRelayTrap = _NpExtRelayTrap_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 25728, 5600, 6)
)
_NpExtRelayTrapAllEvents_ObjectIdentity = ObjectIdentity
npExtRelayTrapAllEvents = _NpExtRelayTrapAllEvents_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 25728, 5600, 6, 127)
)
_NpPwrWdog_ObjectIdentity = ObjectIdentity
npPwrWdog = _NpPwrWdog_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 25728, 5800)
)
_NpPwrWdogTrapData_ObjectIdentity = ObjectIdentity
npPwrWdogTrapData = _NpPwrWdogTrapData_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 25728, 5800, 2)
)


class _NpPwrWdogTrapN_Type(Integer32):
    """Custom type npPwrWdogTrapN based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(1, 4),
    )


_NpPwrWdogTrapN_Type.__name__ = "Integer32"
_NpPwrWdogTrapN_Object = MibScalar
npPwrWdogTrapN = _NpPwrWdogTrapN_Object(
    (1, 3, 6, 1, 4, 1, 25728, 5800, 2, 1),
    _NpPwrWdogTrapN_Type()
)
npPwrWdogTrapN.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    npPwrWdogTrapN.setStatus("current")
_NpPwrWdogTrapMemo_Type = DisplayString
_NpPwrWdogTrapMemo_Object = MibScalar
npPwrWdogTrapMemo = _NpPwrWdogTrapMemo_Object(
    (1, 3, 6, 1, 4, 1, 25728, 5800, 2, 6),
    _NpPwrWdogTrapMemo_Type()
)
npPwrWdogTrapMemo.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    npPwrWdogTrapMemo.setStatus("current")
_NpPwrWdogTrapFailBitmap_Type = Integer32
_NpPwrWdogTrapFailBitmap_Object = MibScalar
npPwrWdogTrapFailBitmap = _NpPwrWdogTrapFailBitmap_Object(
    (1, 3, 6, 1, 4, 1, 25728, 5800, 2, 13),
    _NpPwrWdogTrapFailBitmap_Type()
)
npPwrWdogTrapFailBitmap.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    npPwrWdogTrapFailBitmap.setStatus("current")
_NpPwrWdogTable_Object = MibTable
npPwrWdogTable = _NpPwrWdogTable_Object(
    (1, 3, 6, 1, 4, 1, 25728, 5800, 3)
)
if mibBuilder.loadTexts:
    npPwrWdogTable.setStatus("current")
_NpPwrWdogEntry_Object = MibTableRow
npPwrWdogEntry = _NpPwrWdogEntry_Object(
    (1, 3, 6, 1, 4, 1, 25728, 5800, 3, 1)
)
npPwrWdogEntry.setIndexNames(
    (0, "NETPING-MIB", "npPwrWdogChannelN"),
)
if mibBuilder.loadTexts:
    npPwrWdogEntry.setStatus("current")


class _NpPwrWdogChannelN_Type(Integer32):
    """Custom type npPwrWdogChannelN based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(1, 4),
    )


_NpPwrWdogChannelN_Type.__name__ = "Integer32"
_NpPwrWdogChannelN_Object = MibTableColumn
npPwrWdogChannelN = _NpPwrWdogChannelN_Object(
    (1, 3, 6, 1, 4, 1, 25728, 5800, 3, 1, 1),
    _NpPwrWdogChannelN_Type()
)
npPwrWdogChannelN.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    npPwrWdogChannelN.setStatus("current")


class _NpPwrWdogResetsCounter_Type(Integer32):
    """Custom type npPwrWdogResetsCounter based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(0, 65535),
    )


_NpPwrWdogResetsCounter_Type.__name__ = "Integer32"
_NpPwrWdogResetsCounter_Object = MibTableColumn
npPwrWdogResetsCounter = _NpPwrWdogResetsCounter_Object(
    (1, 3, 6, 1, 4, 1, 25728, 5800, 3, 1, 4),
    _NpPwrWdogResetsCounter_Type()
)
npPwrWdogResetsCounter.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    npPwrWdogResetsCounter.setStatus("current")


class _NpPwrWdogRepeatingResetsCounter_Type(Integer32):
    """Custom type npPwrWdogRepeatingResetsCounter based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(0, 65535),
    )


_NpPwrWdogRepeatingResetsCounter_Type.__name__ = "Integer32"
_NpPwrWdogRepeatingResetsCounter_Object = MibTableColumn
npPwrWdogRepeatingResetsCounter = _NpPwrWdogRepeatingResetsCounter_Object(
    (1, 3, 6, 1, 4, 1, 25728, 5800, 3, 1, 5),
    _NpPwrWdogRepeatingResetsCounter_Type()
)
npPwrWdogRepeatingResetsCounter.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    npPwrWdogRepeatingResetsCounter.setStatus("current")
_NpPwrWdogMemo_Type = DisplayString
_NpPwrWdogMemo_Object = MibTableColumn
npPwrWdogMemo = _NpPwrWdogMemo_Object(
    (1, 3, 6, 1, 4, 1, 25728, 5800, 3, 1, 6),
    _NpPwrWdogMemo_Type()
)
npPwrWdogMemo.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    npPwrWdogMemo.setStatus("current")
_NpPwrWdogTrap_ObjectIdentity = ObjectIdentity
npPwrWdogTrap = _NpPwrWdogTrap_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 25728, 5800, 6)
)
_NpOwInputAnalog_ObjectIdentity = ObjectIdentity
npOwInputAnalog = _NpOwInputAnalog_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 25728, 8200)
)
_NpOwInputAnalogTable_Object = MibTable
npOwInputAnalogTable = _NpOwInputAnalogTable_Object(
    (1, 3, 6, 1, 4, 1, 25728, 8200, 1)
)
if mibBuilder.loadTexts:
    npOwInputAnalogTable.setStatus("current")
_NpOwInputAnalogEntry_Object = MibTableRow
npOwInputAnalogEntry = _NpOwInputAnalogEntry_Object(
    (1, 3, 6, 1, 4, 1, 25728, 8200, 1, 1)
)
npOwInputAnalogEntry.setIndexNames(
    (0, "NETPING-MIB", "npOwInputAnalogSensorN"),
)
if mibBuilder.loadTexts:
    npOwInputAnalogEntry.setStatus("current")


class _NpOwInputAnalogSensorN_Type(Integer32):
    """Custom type npOwInputAnalogSensorN based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(1, 5),
    )


_NpOwInputAnalogSensorN_Type.__name__ = "Integer32"
_NpOwInputAnalogSensorN_Object = MibTableColumn
npOwInputAnalogSensorN = _NpOwInputAnalogSensorN_Object(
    (1, 3, 6, 1, 4, 1, 25728, 8200, 1, 1, 1),
    _NpOwInputAnalogSensorN_Type()
)
npOwInputAnalogSensorN.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    npOwInputAnalogSensorN.setStatus("current")


class _NpOwInputAnalogStatus_Type(Integer32):
    """Custom type npOwInputAnalogStatus based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(0,
              1,
              2,
              3,
              5)
        )
    )
    namedValues = NamedValues(
        *(("aboveSafe", 3),
          ("belowSafe", 1),
          ("failure1w", 0),
          ("failureAnalog", 5),
          ("safe", 2))
    )


_NpOwInputAnalogStatus_Type.__name__ = "Integer32"
_NpOwInputAnalogStatus_Object = MibTableColumn
npOwInputAnalogStatus = _NpOwInputAnalogStatus_Object(
    (1, 3, 6, 1, 4, 1, 25728, 8200, 1, 1, 2),
    _NpOwInputAnalogStatus_Type()
)
npOwInputAnalogStatus.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    npOwInputAnalogStatus.setStatus("current")
_NpOwInputAnalogCurrent_Type = Integer32
_NpOwInputAnalogCurrent_Object = MibTableColumn
npOwInputAnalogCurrent = _NpOwInputAnalogCurrent_Object(
    (1, 3, 6, 1, 4, 1, 25728, 8200, 1, 1, 3),
    _NpOwInputAnalogCurrent_Type()
)
npOwInputAnalogCurrent.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    npOwInputAnalogCurrent.setStatus("current")
_NpOwInputAnalogVoltage_Type = Integer32
_NpOwInputAnalogVoltage_Object = MibTableColumn
npOwInputAnalogVoltage = _NpOwInputAnalogVoltage_Object(
    (1, 3, 6, 1, 4, 1, 25728, 8200, 1, 1, 4),
    _NpOwInputAnalogVoltage_Type()
)
npOwInputAnalogVoltage.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    npOwInputAnalogVoltage.setStatus("current")
_NpOwInputAnalogResistance_Type = Unsigned32
_NpOwInputAnalogResistance_Object = MibTableColumn
npOwInputAnalogResistance = _NpOwInputAnalogResistance_Object(
    (1, 3, 6, 1, 4, 1, 25728, 8200, 1, 1, 5),
    _NpOwInputAnalogResistance_Type()
)
npOwInputAnalogResistance.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    npOwInputAnalogResistance.setStatus("current")
_NpOwInputAnalogMemo_Type = DisplayString
_NpOwInputAnalogMemo_Object = MibTableColumn
npOwInputAnalogMemo = _NpOwInputAnalogMemo_Object(
    (1, 3, 6, 1, 4, 1, 25728, 8200, 1, 1, 6),
    _NpOwInputAnalogMemo_Type()
)
npOwInputAnalogMemo.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    npOwInputAnalogMemo.setStatus("current")


class _NpOwInputAnalogPower_Type(Integer32):
    """Custom type npOwInputAnalogPower based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(0,
              1)
        )
    )
    namedValues = NamedValues(
        *(("off", 0),
          ("on", 1))
    )


_NpOwInputAnalogPower_Type.__name__ = "Integer32"
_NpOwInputAnalogPower_Object = MibTableColumn
npOwInputAnalogPower = _NpOwInputAnalogPower_Object(
    (1, 3, 6, 1, 4, 1, 25728, 8200, 1, 1, 7),
    _NpOwInputAnalogPower_Type()
)
npOwInputAnalogPower.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    npOwInputAnalogPower.setStatus("current")
_NpOwInputAnalogReset_Type = Integer32
_NpOwInputAnalogReset_Object = MibTableColumn
npOwInputAnalogReset = _NpOwInputAnalogReset_Object(
    (1, 3, 6, 1, 4, 1, 25728, 8200, 1, 1, 8),
    _NpOwInputAnalogReset_Type()
)
npOwInputAnalogReset.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    npOwInputAnalogReset.setStatus("current")
_NpOwInputAnalogWorkRangeHigh_Type = Integer32
_NpOwInputAnalogWorkRangeHigh_Object = MibTableColumn
npOwInputAnalogWorkRangeHigh = _NpOwInputAnalogWorkRangeHigh_Object(
    (1, 3, 6, 1, 4, 1, 25728, 8200, 1, 1, 11),
    _NpOwInputAnalogWorkRangeHigh_Type()
)
npOwInputAnalogWorkRangeHigh.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    npOwInputAnalogWorkRangeHigh.setStatus("current")
_NpOwInputAnalogSafeRangeHigh_Type = Integer32
_NpOwInputAnalogSafeRangeHigh_Object = MibTableColumn
npOwInputAnalogSafeRangeHigh = _NpOwInputAnalogSafeRangeHigh_Object(
    (1, 3, 6, 1, 4, 1, 25728, 8200, 1, 1, 12),
    _NpOwInputAnalogSafeRangeHigh_Type()
)
npOwInputAnalogSafeRangeHigh.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    npOwInputAnalogSafeRangeHigh.setStatus("current")
_NpOwInputAnalogSafeRangeLow_Type = Integer32
_NpOwInputAnalogSafeRangeLow_Object = MibTableColumn
npOwInputAnalogSafeRangeLow = _NpOwInputAnalogSafeRangeLow_Object(
    (1, 3, 6, 1, 4, 1, 25728, 8200, 1, 1, 13),
    _NpOwInputAnalogSafeRangeLow_Type()
)
npOwInputAnalogSafeRangeLow.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    npOwInputAnalogSafeRangeLow.setStatus("current")
_NpOwInputAnalogWorkRangeLow_Type = Integer32
_NpOwInputAnalogWorkRangeLow_Object = MibTableColumn
npOwInputAnalogWorkRangeLow = _NpOwInputAnalogWorkRangeLow_Object(
    (1, 3, 6, 1, 4, 1, 25728, 8200, 1, 1, 14),
    _NpOwInputAnalogWorkRangeLow_Type()
)
npOwInputAnalogWorkRangeLow.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    npOwInputAnalogWorkRangeLow.setStatus("current")
_NpOwInputAnalogTraps_ObjectIdentity = ObjectIdentity
npOwInputAnalogTraps = _NpOwInputAnalogTraps_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 25728, 8200, 2)
)
_NpOwInputAnalogTrapPrefix_ObjectIdentity = ObjectIdentity
npOwInputAnalogTrapPrefix = _NpOwInputAnalogTrapPrefix_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 25728, 8200, 2, 0)
)


class _NpOwInputAnalogTrapSensorN_Type(Integer32):
    """Custom type npOwInputAnalogTrapSensorN based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(1, 5),
    )


_NpOwInputAnalogTrapSensorN_Type.__name__ = "Integer32"
_NpOwInputAnalogTrapSensorN_Object = MibScalar
npOwInputAnalogTrapSensorN = _NpOwInputAnalogTrapSensorN_Object(
    (1, 3, 6, 1, 4, 1, 25728, 8200, 2, 1),
    _NpOwInputAnalogTrapSensorN_Type()
)
npOwInputAnalogTrapSensorN.setMaxAccess("accessible-for-notify")
if mibBuilder.loadTexts:
    npOwInputAnalogTrapSensorN.setStatus("current")


class _NpOwInputAnalogTrapStatus_Type(Integer32):
    """Custom type npOwInputAnalogTrapStatus based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(0,
              1,
              2,
              3,
              5)
        )
    )
    namedValues = NamedValues(
        *(("aboveSafe", 3),
          ("belowSafe", 1),
          ("failure1w", 0),
          ("failureAnalog", 5),
          ("safe", 2))
    )


_NpOwInputAnalogTrapStatus_Type.__name__ = "Integer32"
_NpOwInputAnalogTrapStatus_Object = MibScalar
npOwInputAnalogTrapStatus = _NpOwInputAnalogTrapStatus_Object(
    (1, 3, 6, 1, 4, 1, 25728, 8200, 2, 2),
    _NpOwInputAnalogTrapStatus_Type()
)
npOwInputAnalogTrapStatus.setMaxAccess("accessible-for-notify")
if mibBuilder.loadTexts:
    npOwInputAnalogTrapStatus.setStatus("current")
_NpOwInputAnalogTrapCurrent_Type = Integer32
_NpOwInputAnalogTrapCurrent_Object = MibScalar
npOwInputAnalogTrapCurrent = _NpOwInputAnalogTrapCurrent_Object(
    (1, 3, 6, 1, 4, 1, 25728, 8200, 2, 3),
    _NpOwInputAnalogTrapCurrent_Type()
)
npOwInputAnalogTrapCurrent.setMaxAccess("accessible-for-notify")
if mibBuilder.loadTexts:
    npOwInputAnalogTrapCurrent.setStatus("current")
_NpOwInputAnalogTrapVoltage_Type = Integer32
_NpOwInputAnalogTrapVoltage_Object = MibScalar
npOwInputAnalogTrapVoltage = _NpOwInputAnalogTrapVoltage_Object(
    (1, 3, 6, 1, 4, 1, 25728, 8200, 2, 4),
    _NpOwInputAnalogTrapVoltage_Type()
)
npOwInputAnalogTrapVoltage.setMaxAccess("accessible-for-notify")
if mibBuilder.loadTexts:
    npOwInputAnalogTrapVoltage.setStatus("current")
_NpOwInputAnalogTrapResistance_Type = Unsigned32
_NpOwInputAnalogTrapResistance_Object = MibScalar
npOwInputAnalogTrapResistance = _NpOwInputAnalogTrapResistance_Object(
    (1, 3, 6, 1, 4, 1, 25728, 8200, 2, 5),
    _NpOwInputAnalogTrapResistance_Type()
)
npOwInputAnalogTrapResistance.setMaxAccess("accessible-for-notify")
if mibBuilder.loadTexts:
    npOwInputAnalogTrapResistance.setStatus("current")
_NpOwInputAnalogTrapMemo_Type = DisplayString
_NpOwInputAnalogTrapMemo_Object = MibScalar
npOwInputAnalogTrapMemo = _NpOwInputAnalogTrapMemo_Object(
    (1, 3, 6, 1, 4, 1, 25728, 8200, 2, 6),
    _NpOwInputAnalogTrapMemo_Type()
)
npOwInputAnalogTrapMemo.setMaxAccess("accessible-for-notify")
if mibBuilder.loadTexts:
    npOwInputAnalogTrapMemo.setStatus("current")


class _NpOwInputAnalogTrapPower_Type(Integer32):
    """Custom type npOwInputAnalogTrapPower based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(0,
              1,
              3)
        )
    )
    namedValues = NamedValues(
        *(("off", 0),
          ("on", 1),
          ("temporaryOff", 3))
    )


_NpOwInputAnalogTrapPower_Type.__name__ = "Integer32"
_NpOwInputAnalogTrapPower_Object = MibScalar
npOwInputAnalogTrapPower = _NpOwInputAnalogTrapPower_Object(
    (1, 3, 6, 1, 4, 1, 25728, 8200, 2, 7),
    _NpOwInputAnalogTrapPower_Type()
)
npOwInputAnalogTrapPower.setMaxAccess("accessible-for-notify")
if mibBuilder.loadTexts:
    npOwInputAnalogTrapPower.setStatus("current")
_NpOwInputAnalogTrapWorkRangeHigh_Type = Integer32
_NpOwInputAnalogTrapWorkRangeHigh_Object = MibScalar
npOwInputAnalogTrapWorkRangeHigh = _NpOwInputAnalogTrapWorkRangeHigh_Object(
    (1, 3, 6, 1, 4, 1, 25728, 8200, 2, 11),
    _NpOwInputAnalogTrapWorkRangeHigh_Type()
)
npOwInputAnalogTrapWorkRangeHigh.setMaxAccess("accessible-for-notify")
if mibBuilder.loadTexts:
    npOwInputAnalogTrapWorkRangeHigh.setStatus("current")
_NpOwInputAnalogTrapSafeRangeHigh_Type = Integer32
_NpOwInputAnalogTrapSafeRangeHigh_Object = MibScalar
npOwInputAnalogTrapSafeRangeHigh = _NpOwInputAnalogTrapSafeRangeHigh_Object(
    (1, 3, 6, 1, 4, 1, 25728, 8200, 2, 12),
    _NpOwInputAnalogTrapSafeRangeHigh_Type()
)
npOwInputAnalogTrapSafeRangeHigh.setMaxAccess("accessible-for-notify")
if mibBuilder.loadTexts:
    npOwInputAnalogTrapSafeRangeHigh.setStatus("current")
_NpOwInputAnalogTrapSafeRangeLow_Type = Integer32
_NpOwInputAnalogTrapSafeRangeLow_Object = MibScalar
npOwInputAnalogTrapSafeRangeLow = _NpOwInputAnalogTrapSafeRangeLow_Object(
    (1, 3, 6, 1, 4, 1, 25728, 8200, 2, 13),
    _NpOwInputAnalogTrapSafeRangeLow_Type()
)
npOwInputAnalogTrapSafeRangeLow.setMaxAccess("accessible-for-notify")
if mibBuilder.loadTexts:
    npOwInputAnalogTrapSafeRangeLow.setStatus("current")
_NpOwInputAnalogTrapWorkRangeLow_Type = Integer32
_NpOwInputAnalogTrapWorkRangeLow_Object = MibScalar
npOwInputAnalogTrapWorkRangeLow = _NpOwInputAnalogTrapWorkRangeLow_Object(
    (1, 3, 6, 1, 4, 1, 25728, 8200, 2, 14),
    _NpOwInputAnalogTrapWorkRangeLow_Type()
)
npOwInputAnalogTrapWorkRangeLow.setMaxAccess("accessible-for-notify")
if mibBuilder.loadTexts:
    npOwInputAnalogTrapWorkRangeLow.setStatus("current")
_NpRelHumidity_ObjectIdentity = ObjectIdentity
npRelHumidity = _NpRelHumidity_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 25728, 8400)
)
_NpRelHumTable_Object = MibTable
npRelHumTable = _NpRelHumTable_Object(
    (1, 3, 6, 1, 4, 1, 25728, 8400, 1)
)
if mibBuilder.loadTexts:
    npRelHumTable.setStatus("current")
_NpRelHumEntry_Object = MibTableRow
npRelHumEntry = _NpRelHumEntry_Object(
    (1, 3, 6, 1, 4, 1, 25728, 8400, 1, 1)
)
npRelHumEntry.setIndexNames(
    (0, "NETPING-MIB", "npRelHumN"),
)
if mibBuilder.loadTexts:
    npRelHumEntry.setStatus("current")


class _NpRelHumN_Type(Integer32):
    """Custom type npRelHumN based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(1, 4),
    )


_NpRelHumN_Type.__name__ = "Integer32"
_NpRelHumN_Object = MibTableColumn
npRelHumN = _NpRelHumN_Object(
    (1, 3, 6, 1, 4, 1, 25728, 8400, 1, 1, 1),
    _NpRelHumN_Type()
)
npRelHumN.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    npRelHumN.setStatus("current")


class _NpRelHumValue_Type(Integer32):
    """Custom type npRelHumValue based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(0, 100),
    )


_NpRelHumValue_Type.__name__ = "Integer32"
_NpRelHumValue_Object = MibTableColumn
npRelHumValue = _NpRelHumValue_Object(
    (1, 3, 6, 1, 4, 1, 25728, 8400, 1, 1, 2),
    _NpRelHumValue_Type()
)
npRelHumValue.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    npRelHumValue.setStatus("current")


class _NpRelHumStatus_Type(Integer32):
    """Custom type npRelHumStatus based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(0,
              1,
              2,
              3)
        )
    )
    namedValues = NamedValues(
        *(("aboveSafeRange", 3),
          ("belowSafeRange", 1),
          ("inSafeRange", 2),
          ("sensorFailed", 0))
    )


_NpRelHumStatus_Type.__name__ = "Integer32"
_NpRelHumStatus_Object = MibTableColumn
npRelHumStatus = _NpRelHumStatus_Object(
    (1, 3, 6, 1, 4, 1, 25728, 8400, 1, 1, 3),
    _NpRelHumStatus_Type()
)
npRelHumStatus.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    npRelHumStatus.setStatus("current")


class _NpRelHumTempValue_Type(Integer32):
    """Custom type npRelHumTempValue based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(-60, 200),
    )


_NpRelHumTempValue_Type.__name__ = "Integer32"
_NpRelHumTempValue_Object = MibTableColumn
npRelHumTempValue = _NpRelHumTempValue_Object(
    (1, 3, 6, 1, 4, 1, 25728, 8400, 1, 1, 4),
    _NpRelHumTempValue_Type()
)
npRelHumTempValue.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    npRelHumTempValue.setStatus("current")


class _NpRelHumTempStatus_Type(Integer32):
    """Custom type npRelHumTempStatus based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(0,
              1,
              2,
              3)
        )
    )
    namedValues = NamedValues(
        *(("aboveSafeRange", 3),
          ("belowSafeRange", 1),
          ("inSafeRange", 2),
          ("sensorFailed", 0))
    )


_NpRelHumTempStatus_Type.__name__ = "Integer32"
_NpRelHumTempStatus_Object = MibTableColumn
npRelHumTempStatus = _NpRelHumTempStatus_Object(
    (1, 3, 6, 1, 4, 1, 25728, 8400, 1, 1, 5),
    _NpRelHumTempStatus_Type()
)
npRelHumTempStatus.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    npRelHumTempStatus.setStatus("current")
_NpRelHumMemo_Type = DisplayString
_NpRelHumMemo_Object = MibTableColumn
npRelHumMemo = _NpRelHumMemo_Object(
    (1, 3, 6, 1, 4, 1, 25728, 8400, 1, 1, 6),
    _NpRelHumMemo_Type()
)
npRelHumMemo.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    npRelHumMemo.setStatus("current")


class _NpRelHumSafeRangeHigh_Type(Integer32):
    """Custom type npRelHumSafeRangeHigh based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(0, 100),
    )


_NpRelHumSafeRangeHigh_Type.__name__ = "Integer32"
_NpRelHumSafeRangeHigh_Object = MibTableColumn
npRelHumSafeRangeHigh = _NpRelHumSafeRangeHigh_Object(
    (1, 3, 6, 1, 4, 1, 25728, 8400, 1, 1, 7),
    _NpRelHumSafeRangeHigh_Type()
)
npRelHumSafeRangeHigh.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    npRelHumSafeRangeHigh.setStatus("current")


class _NpRelHumSafeRangeLow_Type(Integer32):
    """Custom type npRelHumSafeRangeLow based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(0, 100),
    )


_NpRelHumSafeRangeLow_Type.__name__ = "Integer32"
_NpRelHumSafeRangeLow_Object = MibTableColumn
npRelHumSafeRangeLow = _NpRelHumSafeRangeLow_Object(
    (1, 3, 6, 1, 4, 1, 25728, 8400, 1, 1, 8),
    _NpRelHumSafeRangeLow_Type()
)
npRelHumSafeRangeLow.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    npRelHumSafeRangeLow.setStatus("current")


class _NpRelHumTempSafeRangeHigh_Type(Integer32):
    """Custom type npRelHumTempSafeRangeHigh based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(-55, 150),
    )


_NpRelHumTempSafeRangeHigh_Type.__name__ = "Integer32"
_NpRelHumTempSafeRangeHigh_Object = MibTableColumn
npRelHumTempSafeRangeHigh = _NpRelHumTempSafeRangeHigh_Object(
    (1, 3, 6, 1, 4, 1, 25728, 8400, 1, 1, 9),
    _NpRelHumTempSafeRangeHigh_Type()
)
npRelHumTempSafeRangeHigh.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    npRelHumTempSafeRangeHigh.setStatus("current")


class _NpRelHumTempSafeRangeLow_Type(Integer32):
    """Custom type npRelHumTempSafeRangeLow based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(-55, 150),
    )


_NpRelHumTempSafeRangeLow_Type.__name__ = "Integer32"
_NpRelHumTempSafeRangeLow_Object = MibTableColumn
npRelHumTempSafeRangeLow = _NpRelHumTempSafeRangeLow_Object(
    (1, 3, 6, 1, 4, 1, 25728, 8400, 1, 1, 10),
    _NpRelHumTempSafeRangeLow_Type()
)
npRelHumTempSafeRangeLow.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    npRelHumTempSafeRangeLow.setStatus("current")
_NpRelHumTrapData_ObjectIdentity = ObjectIdentity
npRelHumTrapData = _NpRelHumTrapData_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 25728, 8400, 3)
)


class _NpRelHumTrapDataN_Type(Integer32):
    """Custom type npRelHumTrapDataN based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(1, 4),
    )


_NpRelHumTrapDataN_Type.__name__ = "Integer32"
_NpRelHumTrapDataN_Object = MibScalar
npRelHumTrapDataN = _NpRelHumTrapDataN_Object(
    (1, 3, 6, 1, 4, 1, 25728, 8400, 3, 1),
    _NpRelHumTrapDataN_Type()
)
npRelHumTrapDataN.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    npRelHumTrapDataN.setStatus("current")
_NpRelHumTrapDataValue_Type = Integer32
_NpRelHumTrapDataValue_Object = MibScalar
npRelHumTrapDataValue = _NpRelHumTrapDataValue_Object(
    (1, 3, 6, 1, 4, 1, 25728, 8400, 3, 2),
    _NpRelHumTrapDataValue_Type()
)
npRelHumTrapDataValue.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    npRelHumTrapDataValue.setStatus("current")


class _NpRelHumTrapDataStatus_Type(Integer32):
    """Custom type npRelHumTrapDataStatus based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(0,
              1,
              2,
              3)
        )
    )
    namedValues = NamedValues(
        *(("aboveSafeRange", 3),
          ("belowSafeRange", 1),
          ("inSafeRange", 2),
          ("sensorFailed", 0))
    )


_NpRelHumTrapDataStatus_Type.__name__ = "Integer32"
_NpRelHumTrapDataStatus_Object = MibScalar
npRelHumTrapDataStatus = _NpRelHumTrapDataStatus_Object(
    (1, 3, 6, 1, 4, 1, 25728, 8400, 3, 4),
    _NpRelHumTrapDataStatus_Type()
)
npRelHumTrapDataStatus.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    npRelHumTrapDataStatus.setStatus("current")
_NpRelHumTrapDataMemo_Type = DisplayString
_NpRelHumTrapDataMemo_Object = MibScalar
npRelHumTrapDataMemo = _NpRelHumTrapDataMemo_Object(
    (1, 3, 6, 1, 4, 1, 25728, 8400, 3, 6),
    _NpRelHumTrapDataMemo_Type()
)
npRelHumTrapDataMemo.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    npRelHumTrapDataMemo.setStatus("current")
_NpRelHumTrapDataSafeRangeHigh_Type = Integer32
_NpRelHumTrapDataSafeRangeHigh_Object = MibScalar
npRelHumTrapDataSafeRangeHigh = _NpRelHumTrapDataSafeRangeHigh_Object(
    (1, 3, 6, 1, 4, 1, 25728, 8400, 3, 7),
    _NpRelHumTrapDataSafeRangeHigh_Type()
)
npRelHumTrapDataSafeRangeHigh.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    npRelHumTrapDataSafeRangeHigh.setStatus("current")
_NpRelHumTrapDataSafeRangeLow_Type = Integer32
_NpRelHumTrapDataSafeRangeLow_Object = MibScalar
npRelHumTrapDataSafeRangeLow = _NpRelHumTrapDataSafeRangeLow_Object(
    (1, 3, 6, 1, 4, 1, 25728, 8400, 3, 8),
    _NpRelHumTrapDataSafeRangeLow_Type()
)
npRelHumTrapDataSafeRangeLow.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    npRelHumTrapDataSafeRangeLow.setStatus("current")
_NpRelHumTrap_ObjectIdentity = ObjectIdentity
npRelHumTrap = _NpRelHumTrap_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 25728, 8400, 6)
)
_NpRelHumTrapAllEvents_ObjectIdentity = ObjectIdentity
npRelHumTrapAllEvents = _NpRelHumTrapAllEvents_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 25728, 8400, 6, 127)
)
_NpRelHumTrapTemp_ObjectIdentity = ObjectIdentity
npRelHumTrapTemp = _NpRelHumTrapTemp_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 25728, 8400, 7)
)
_NpRelHumTrapTempAllEvents_ObjectIdentity = ObjectIdentity
npRelHumTrapTempAllEvents = _NpRelHumTrapTempAllEvents_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 25728, 8400, 7, 127)
)
_NpThermo_ObjectIdentity = ObjectIdentity
npThermo = _NpThermo_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 25728, 8800)
)
_NpThermoTable_Object = MibTable
npThermoTable = _NpThermoTable_Object(
    (1, 3, 6, 1, 4, 1, 25728, 8800, 1)
)
if mibBuilder.loadTexts:
    npThermoTable.setStatus("current")
_NpThermoEntry_Object = MibTableRow
npThermoEntry = _NpThermoEntry_Object(
    (1, 3, 6, 1, 4, 1, 25728, 8800, 1, 1)
)
npThermoEntry.setIndexNames(
    (0, "NETPING-MIB", "npThermoSensorN"),
)
if mibBuilder.loadTexts:
    npThermoEntry.setStatus("current")


class _NpThermoSensorN_Type(Integer32):
    """Custom type npThermoSensorN based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(1, 8),
    )


_NpThermoSensorN_Type.__name__ = "Integer32"
_NpThermoSensorN_Object = MibTableColumn
npThermoSensorN = _NpThermoSensorN_Object(
    (1, 3, 6, 1, 4, 1, 25728, 8800, 1, 1, 1),
    _NpThermoSensorN_Type()
)
npThermoSensorN.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    npThermoSensorN.setStatus("current")


class _NpThermoValue_Type(Integer32):
    """Custom type npThermoValue based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(-60, 280),
    )


_NpThermoValue_Type.__name__ = "Integer32"
_NpThermoValue_Object = MibTableColumn
npThermoValue = _NpThermoValue_Object(
    (1, 3, 6, 1, 4, 1, 25728, 8800, 1, 1, 2),
    _NpThermoValue_Type()
)
npThermoValue.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    npThermoValue.setStatus("current")


class _NpThermoStatus_Type(Integer32):
    """Custom type npThermoStatus based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(0,
              1,
              2,
              3)
        )
    )
    namedValues = NamedValues(
        *(("failed", 0),
          ("high", 3),
          ("low", 1),
          ("norm", 2))
    )


_NpThermoStatus_Type.__name__ = "Integer32"
_NpThermoStatus_Object = MibTableColumn
npThermoStatus = _NpThermoStatus_Object(
    (1, 3, 6, 1, 4, 1, 25728, 8800, 1, 1, 3),
    _NpThermoStatus_Type()
)
npThermoStatus.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    npThermoStatus.setStatus("current")


class _NpThermoLow_Type(Integer32):
    """Custom type npThermoLow based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(-60, 280),
    )


_NpThermoLow_Type.__name__ = "Integer32"
_NpThermoLow_Object = MibTableColumn
npThermoLow = _NpThermoLow_Object(
    (1, 3, 6, 1, 4, 1, 25728, 8800, 1, 1, 4),
    _NpThermoLow_Type()
)
npThermoLow.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    npThermoLow.setStatus("current")


class _NpThermoHigh_Type(Integer32):
    """Custom type npThermoHigh based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(-60, 280),
    )


_NpThermoHigh_Type.__name__ = "Integer32"
_NpThermoHigh_Object = MibTableColumn
npThermoHigh = _NpThermoHigh_Object(
    (1, 3, 6, 1, 4, 1, 25728, 8800, 1, 1, 5),
    _NpThermoHigh_Type()
)
npThermoHigh.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    npThermoHigh.setStatus("current")
_NpThermoMemo_Type = DisplayString
_NpThermoMemo_Object = MibTableColumn
npThermoMemo = _NpThermoMemo_Object(
    (1, 3, 6, 1, 4, 1, 25728, 8800, 1, 1, 6),
    _NpThermoMemo_Type()
)
npThermoMemo.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    npThermoMemo.setStatus("current")
_NpThermoValuePrecise_Type = FixedPoint1000
_NpThermoValuePrecise_Object = MibTableColumn
npThermoValuePrecise = _NpThermoValuePrecise_Object(
    (1, 3, 6, 1, 4, 1, 25728, 8800, 1, 1, 7),
    _NpThermoValuePrecise_Type()
)
npThermoValuePrecise.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    npThermoValuePrecise.setStatus("current")
_NpThermoTraps_ObjectIdentity = ObjectIdentity
npThermoTraps = _NpThermoTraps_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 25728, 8800, 2)
)
_NpThermoTrapPrefix_ObjectIdentity = ObjectIdentity
npThermoTrapPrefix = _NpThermoTrapPrefix_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 25728, 8800, 2, 0)
)


class _NpThermoTrapSensorN_Type(Integer32):
    """Custom type npThermoTrapSensorN based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(1, 8),
    )


_NpThermoTrapSensorN_Type.__name__ = "Integer32"
_NpThermoTrapSensorN_Object = MibScalar
npThermoTrapSensorN = _NpThermoTrapSensorN_Object(
    (1, 3, 6, 1, 4, 1, 25728, 8800, 2, 1),
    _NpThermoTrapSensorN_Type()
)
npThermoTrapSensorN.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    npThermoTrapSensorN.setStatus("current")


class _NpThermoTrapValue_Type(Integer32):
    """Custom type npThermoTrapValue based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(-60, 280),
    )


_NpThermoTrapValue_Type.__name__ = "Integer32"
_NpThermoTrapValue_Object = MibScalar
npThermoTrapValue = _NpThermoTrapValue_Object(
    (1, 3, 6, 1, 4, 1, 25728, 8800, 2, 2),
    _NpThermoTrapValue_Type()
)
npThermoTrapValue.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    npThermoTrapValue.setStatus("current")


class _NpThermoTrapStatus_Type(Integer32):
    """Custom type npThermoTrapStatus based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(0,
              1,
              2,
              3)
        )
    )
    namedValues = NamedValues(
        *(("failed", 0),
          ("high", 3),
          ("low", 1),
          ("norm", 2))
    )


_NpThermoTrapStatus_Type.__name__ = "Integer32"
_NpThermoTrapStatus_Object = MibScalar
npThermoTrapStatus = _NpThermoTrapStatus_Object(
    (1, 3, 6, 1, 4, 1, 25728, 8800, 2, 3),
    _NpThermoTrapStatus_Type()
)
npThermoTrapStatus.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    npThermoTrapStatus.setStatus("current")


class _NpThermoTrapLow_Type(Integer32):
    """Custom type npThermoTrapLow based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(-60, 280),
    )


_NpThermoTrapLow_Type.__name__ = "Integer32"
_NpThermoTrapLow_Object = MibScalar
npThermoTrapLow = _NpThermoTrapLow_Object(
    (1, 3, 6, 1, 4, 1, 25728, 8800, 2, 4),
    _NpThermoTrapLow_Type()
)
npThermoTrapLow.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    npThermoTrapLow.setStatus("current")


class _NpThermoTrapHigh_Type(Integer32):
    """Custom type npThermoTrapHigh based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(-60, 280),
    )


_NpThermoTrapHigh_Type.__name__ = "Integer32"
_NpThermoTrapHigh_Object = MibScalar
npThermoTrapHigh = _NpThermoTrapHigh_Object(
    (1, 3, 6, 1, 4, 1, 25728, 8800, 2, 5),
    _NpThermoTrapHigh_Type()
)
npThermoTrapHigh.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    npThermoTrapHigh.setStatus("current")
_NpThermoTrapMemo_Type = DisplayString
_NpThermoTrapMemo_Object = MibScalar
npThermoTrapMemo = _NpThermoTrapMemo_Object(
    (1, 3, 6, 1, 4, 1, 25728, 8800, 2, 6),
    _NpThermoTrapMemo_Type()
)
npThermoTrapMemo.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    npThermoTrapMemo.setStatus("current")
_NpIo_ObjectIdentity = ObjectIdentity
npIo = _NpIo_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 25728, 8900)
)
_NpIoTable_Object = MibTable
npIoTable = _NpIoTable_Object(
    (1, 3, 6, 1, 4, 1, 25728, 8900, 1)
)
if mibBuilder.loadTexts:
    npIoTable.setStatus("current")
_NpIoEntry_Object = MibTableRow
npIoEntry = _NpIoEntry_Object(
    (1, 3, 6, 1, 4, 1, 25728, 8900, 1, 1)
)
npIoEntry.setIndexNames(
    (0, "NETPING-MIB", "npIoLineN"),
)
if mibBuilder.loadTexts:
    npIoEntry.setStatus("current")


class _NpIoLineN_Type(Integer32):
    """Custom type npIoLineN based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(1, 12),
    )


_NpIoLineN_Type.__name__ = "Integer32"
_NpIoLineN_Object = MibTableColumn
npIoLineN = _NpIoLineN_Object(
    (1, 3, 6, 1, 4, 1, 25728, 8900, 1, 1, 1),
    _NpIoLineN_Type()
)
npIoLineN.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    npIoLineN.setStatus("current")


class _NpIoLevelIn_Type(Integer32):
    """Custom type npIoLevelIn based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(0, 1),
    )


_NpIoLevelIn_Type.__name__ = "Integer32"
_NpIoLevelIn_Object = MibTableColumn
npIoLevelIn = _NpIoLevelIn_Object(
    (1, 3, 6, 1, 4, 1, 25728, 8900, 1, 1, 2),
    _NpIoLevelIn_Type()
)
npIoLevelIn.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    npIoLevelIn.setStatus("current")


class _NpIoLevelOut_Type(Integer32):
    """Custom type npIoLevelOut based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(-1,
              0,
              1)
        )
    )
    namedValues = NamedValues(
        *(("flip", -1),
          ("high", 1),
          ("low", 0))
    )


_NpIoLevelOut_Type.__name__ = "Integer32"
_NpIoLevelOut_Object = MibTableColumn
npIoLevelOut = _NpIoLevelOut_Object(
    (1, 3, 6, 1, 4, 1, 25728, 8900, 1, 1, 3),
    _NpIoLevelOut_Type()
)
npIoLevelOut.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    npIoLevelOut.setStatus("current")
_NpIoMemo_Type = DisplayString
_NpIoMemo_Object = MibTableColumn
npIoMemo = _NpIoMemo_Object(
    (1, 3, 6, 1, 4, 1, 25728, 8900, 1, 1, 6),
    _NpIoMemo_Type()
)
npIoMemo.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    npIoMemo.setStatus("current")
_NpIoPulseCounter_Type = Counter32
_NpIoPulseCounter_Object = MibTableColumn
npIoPulseCounter = _NpIoPulseCounter_Object(
    (1, 3, 6, 1, 4, 1, 25728, 8900, 1, 1, 9),
    _NpIoPulseCounter_Type()
)
npIoPulseCounter.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    npIoPulseCounter.setStatus("current")


class _NpIoSinglePulseDuration_Type(Integer32):
    """Custom type npIoSinglePulseDuration based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(100, 25500),
    )


_NpIoSinglePulseDuration_Type.__name__ = "Integer32"
_NpIoSinglePulseDuration_Object = MibTableColumn
npIoSinglePulseDuration = _NpIoSinglePulseDuration_Object(
    (1, 3, 6, 1, 4, 1, 25728, 8900, 1, 1, 12),
    _NpIoSinglePulseDuration_Type()
)
npIoSinglePulseDuration.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    npIoSinglePulseDuration.setStatus("current")
_NpIoSinglePulseStart_Type = Integer32
_NpIoSinglePulseStart_Object = MibTableColumn
npIoSinglePulseStart = _NpIoSinglePulseStart_Object(
    (1, 3, 6, 1, 4, 1, 25728, 8900, 1, 1, 13),
    _NpIoSinglePulseStart_Type()
)
npIoSinglePulseStart.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    npIoSinglePulseStart.setStatus("current")
_NpIoTraps_ObjectIdentity = ObjectIdentity
npIoTraps = _NpIoTraps_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 25728, 8900, 2)
)
_NpIoTrapPrefix_ObjectIdentity = ObjectIdentity
npIoTrapPrefix = _NpIoTrapPrefix_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 25728, 8900, 2, 0)
)


class _NpIoTrapLineN_Type(Integer32):
    """Custom type npIoTrapLineN based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(1, 12),
    )


_NpIoTrapLineN_Type.__name__ = "Integer32"
_NpIoTrapLineN_Object = MibScalar
npIoTrapLineN = _NpIoTrapLineN_Object(
    (1, 3, 6, 1, 4, 1, 25728, 8900, 2, 1),
    _NpIoTrapLineN_Type()
)
npIoTrapLineN.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    npIoTrapLineN.setStatus("current")


class _NpIoTrapLevelIn_Type(Integer32):
    """Custom type npIoTrapLevelIn based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(0, 1),
    )


_NpIoTrapLevelIn_Type.__name__ = "Integer32"
_NpIoTrapLevelIn_Object = MibScalar
npIoTrapLevelIn = _NpIoTrapLevelIn_Object(
    (1, 3, 6, 1, 4, 1, 25728, 8900, 2, 2),
    _NpIoTrapLevelIn_Type()
)
npIoTrapLevelIn.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    npIoTrapLevelIn.setStatus("current")
_NpIoTrapMemo_Type = DisplayString
_NpIoTrapMemo_Object = MibScalar
npIoTrapMemo = _NpIoTrapMemo_Object(
    (1, 3, 6, 1, 4, 1, 25728, 8900, 2, 6),
    _NpIoTrapMemo_Type()
)
npIoTrapMemo.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    npIoTrapMemo.setStatus("current")
_NpIoTrapLevelLegend_Type = DisplayString
_NpIoTrapLevelLegend_Object = MibScalar
npIoTrapLevelLegend = _NpIoTrapLevelLegend_Object(
    (1, 3, 6, 1, 4, 1, 25728, 8900, 2, 7),
    _NpIoTrapLevelLegend_Type()
)
npIoTrapLevelLegend.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    npIoTrapLevelLegend.setStatus("current")
_NpVoltage_ObjectIdentity = ObjectIdentity
npVoltage = _NpVoltage_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 25728, 9000)
)
_NpVoltageTable_Object = MibTable
npVoltageTable = _NpVoltageTable_Object(
    (1, 3, 6, 1, 4, 1, 25728, 9000, 1)
)
if mibBuilder.loadTexts:
    npVoltageTable.setStatus("current")
_NpVoltageEntry_Object = MibTableRow
npVoltageEntry = _NpVoltageEntry_Object(
    (1, 3, 6, 1, 4, 1, 25728, 9000, 1, 1)
)
npVoltageEntry.setIndexNames(
    (0, "NETPING-MIB", "npVoltageN"),
)
if mibBuilder.loadTexts:
    npVoltageEntry.setStatus("current")


class _NpVoltageN_Type(Integer32):
    """Custom type npVoltageN based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(1, 3),
    )


_NpVoltageN_Type.__name__ = "Integer32"
_NpVoltageN_Object = MibTableColumn
npVoltageN = _NpVoltageN_Object(
    (1, 3, 6, 1, 4, 1, 25728, 9000, 1, 1, 1),
    _NpVoltageN_Type()
)
npVoltageN.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    npVoltageN.setStatus("current")


class _NpVoltageRMS_Type(Integer32):
    """Custom type npVoltageRMS based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(0, 1000),
    )


_NpVoltageRMS_Type.__name__ = "Integer32"
_NpVoltageRMS_Object = MibTableColumn
npVoltageRMS = _NpVoltageRMS_Object(
    (1, 3, 6, 1, 4, 1, 25728, 9000, 1, 1, 2),
    _NpVoltageRMS_Type()
)
npVoltageRMS.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    npVoltageRMS.setStatus("current")


class _NpVoltageStatus_Type(Integer32):
    """Custom type npVoltageStatus based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(0,
              1,
              2,
              3,
              4)
        )
    )
    namedValues = NamedValues(
        *(("bad", 2),
          ("good", 4),
          ("noVoltage", 1),
          ("sensorFailed", 0),
          ("warn", 3))
    )


_NpVoltageStatus_Type.__name__ = "Integer32"
_NpVoltageStatus_Object = MibTableColumn
npVoltageStatus = _NpVoltageStatus_Object(
    (1, 3, 6, 1, 4, 1, 25728, 9000, 1, 1, 3),
    _NpVoltageStatus_Type()
)
npVoltageStatus.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    npVoltageStatus.setStatus("current")


class _NpVoltageFreq_Type(Integer32):
    """Custom type npVoltageFreq based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(0, 10000),
    )


_NpVoltageFreq_Type.__name__ = "Integer32"
_NpVoltageFreq_Object = MibTableColumn
npVoltageFreq = _NpVoltageFreq_Object(
    (1, 3, 6, 1, 4, 1, 25728, 9000, 1, 1, 4),
    _NpVoltageFreq_Type()
)
npVoltageFreq.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    npVoltageFreq.setStatus("current")


class _NpVoltageFreqStatus_Type(Integer32):
    """Custom type npVoltageFreqStatus based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(0,
              1,
              2,
              3,
              4)
        )
    )
    namedValues = NamedValues(
        *(("bad", 2),
          ("good", 4),
          ("noVoltage", 1),
          ("sensorFailed", 0),
          ("warn", 3))
    )


_NpVoltageFreqStatus_Type.__name__ = "Integer32"
_NpVoltageFreqStatus_Object = MibTableColumn
npVoltageFreqStatus = _NpVoltageFreqStatus_Object(
    (1, 3, 6, 1, 4, 1, 25728, 9000, 1, 1, 5),
    _NpVoltageFreqStatus_Type()
)
npVoltageFreqStatus.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    npVoltageFreqStatus.setStatus("current")
_NpVoltageMemo_Type = DisplayString
_NpVoltageMemo_Object = MibTableColumn
npVoltageMemo = _NpVoltageMemo_Object(
    (1, 3, 6, 1, 4, 1, 25728, 9000, 1, 1, 6),
    _NpVoltageMemo_Type()
)
npVoltageMemo.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    npVoltageMemo.setStatus("current")
_NpVoltageSagCounter_Type = Counter32
_NpVoltageSagCounter_Object = MibTableColumn
npVoltageSagCounter = _NpVoltageSagCounter_Object(
    (1, 3, 6, 1, 4, 1, 25728, 9000, 1, 1, 10),
    _NpVoltageSagCounter_Type()
)
npVoltageSagCounter.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    npVoltageSagCounter.setStatus("current")


class _NpVoltageSagStatus_Type(Integer32):
    """Custom type npVoltageSagStatus based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(0,
              1,
              2,
              3,
              4,
              5)
        )
    )
    namedValues = NamedValues(
        *(("high", 2),
          ("medium", 3),
          ("noSags", 5),
          ("noVoltage", 1),
          ("sensorFailed", 0),
          ("small", 4))
    )


_NpVoltageSagStatus_Type.__name__ = "Integer32"
_NpVoltageSagStatus_Object = MibTableColumn
npVoltageSagStatus = _NpVoltageSagStatus_Object(
    (1, 3, 6, 1, 4, 1, 25728, 9000, 1, 1, 11),
    _NpVoltageSagStatus_Type()
)
npVoltageSagStatus.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    npVoltageSagStatus.setStatus("current")


class _NpVoltageSagSmallThreshold_Type(Integer32):
    """Custom type npVoltageSagSmallThreshold based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(0, 100),
    )


_NpVoltageSagSmallThreshold_Type.__name__ = "Integer32"
_NpVoltageSagSmallThreshold_Object = MibTableColumn
npVoltageSagSmallThreshold = _NpVoltageSagSmallThreshold_Object(
    (1, 3, 6, 1, 4, 1, 25728, 9000, 1, 1, 12),
    _NpVoltageSagSmallThreshold_Type()
)
npVoltageSagSmallThreshold.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    npVoltageSagSmallThreshold.setStatus("current")


class _NpVoltageSagMediumThreshold_Type(Integer32):
    """Custom type npVoltageSagMediumThreshold based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(0, 100),
    )


_NpVoltageSagMediumThreshold_Type.__name__ = "Integer32"
_NpVoltageSagMediumThreshold_Object = MibTableColumn
npVoltageSagMediumThreshold = _NpVoltageSagMediumThreshold_Object(
    (1, 3, 6, 1, 4, 1, 25728, 9000, 1, 1, 13),
    _NpVoltageSagMediumThreshold_Type()
)
npVoltageSagMediumThreshold.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    npVoltageSagMediumThreshold.setStatus("current")


class _NpVoltageSagBigThreshold_Type(Integer32):
    """Custom type npVoltageSagBigThreshold based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(0, 100),
    )


_NpVoltageSagBigThreshold_Type.__name__ = "Integer32"
_NpVoltageSagBigThreshold_Object = MibTableColumn
npVoltageSagBigThreshold = _NpVoltageSagBigThreshold_Object(
    (1, 3, 6, 1, 4, 1, 25728, 9000, 1, 1, 14),
    _NpVoltageSagBigThreshold_Type()
)
npVoltageSagBigThreshold.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    npVoltageSagBigThreshold.setStatus("current")


class _NpVoltageStandard_Type(Integer32):
    """Custom type npVoltageStandard based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(100, 240),
    )


_NpVoltageStandard_Type.__name__ = "Integer32"
_NpVoltageStandard_Object = MibTableColumn
npVoltageStandard = _NpVoltageStandard_Object(
    (1, 3, 6, 1, 4, 1, 25728, 9000, 1, 1, 20),
    _NpVoltageStandard_Type()
)
npVoltageStandard.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    npVoltageStandard.setStatus("current")


class _NpVoltagePeak_Type(Integer32):
    """Custom type npVoltagePeak based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(0, 1000),
    )


_NpVoltagePeak_Type.__name__ = "Integer32"
_NpVoltagePeak_Object = MibTableColumn
npVoltagePeak = _NpVoltagePeak_Object(
    (1, 3, 6, 1, 4, 1, 25728, 9000, 1, 1, 30),
    _NpVoltagePeak_Type()
)
npVoltagePeak.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    npVoltagePeak.setStatus("current")


class _NpVoltagePeakStatus_Type(Integer32):
    """Custom type npVoltagePeakStatus based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(0,
              1,
              2,
              3)
        )
    )
    namedValues = NamedValues(
        *(("dangerous", 2),
          ("noPeaks", 3),
          ("noVoltage", 1),
          ("sensorFailed", 0))
    )


_NpVoltagePeakStatus_Type.__name__ = "Integer32"
_NpVoltagePeakStatus_Object = MibTableColumn
npVoltagePeakStatus = _NpVoltagePeakStatus_Object(
    (1, 3, 6, 1, 4, 1, 25728, 9000, 1, 1, 31),
    _NpVoltagePeakStatus_Type()
)
npVoltagePeakStatus.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    npVoltagePeakStatus.setStatus("current")
_NpVoltageTraps_ObjectIdentity = ObjectIdentity
npVoltageTraps = _NpVoltageTraps_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 25728, 9000, 2)
)
_NpVoltageTrapPrefix_ObjectIdentity = ObjectIdentity
npVoltageTrapPrefix = _NpVoltageTrapPrefix_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 25728, 9000, 2, 0)
)


class _NpVoltageTrapN_Type(Integer32):
    """Custom type npVoltageTrapN based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(1, 3),
    )


_NpVoltageTrapN_Type.__name__ = "Integer32"
_NpVoltageTrapN_Object = MibScalar
npVoltageTrapN = _NpVoltageTrapN_Object(
    (1, 3, 6, 1, 4, 1, 25728, 9000, 2, 1),
    _NpVoltageTrapN_Type()
)
npVoltageTrapN.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    npVoltageTrapN.setStatus("current")


class _NpVoltageTrapRMS_Type(Integer32):
    """Custom type npVoltageTrapRMS based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(0, 1000),
    )


_NpVoltageTrapRMS_Type.__name__ = "Integer32"
_NpVoltageTrapRMS_Object = MibScalar
npVoltageTrapRMS = _NpVoltageTrapRMS_Object(
    (1, 3, 6, 1, 4, 1, 25728, 9000, 2, 2),
    _NpVoltageTrapRMS_Type()
)
npVoltageTrapRMS.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    npVoltageTrapRMS.setStatus("current")


class _NpVoltageTrapStatus_Type(Integer32):
    """Custom type npVoltageTrapStatus based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(0,
              1,
              2,
              3,
              4)
        )
    )
    namedValues = NamedValues(
        *(("bad", 2),
          ("good", 4),
          ("noVoltage", 1),
          ("sensorFailed", 0),
          ("warn", 3))
    )


_NpVoltageTrapStatus_Type.__name__ = "Integer32"
_NpVoltageTrapStatus_Object = MibScalar
npVoltageTrapStatus = _NpVoltageTrapStatus_Object(
    (1, 3, 6, 1, 4, 1, 25728, 9000, 2, 3),
    _NpVoltageTrapStatus_Type()
)
npVoltageTrapStatus.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    npVoltageTrapStatus.setStatus("current")


class _NpVoltageTrapFreq_Type(Integer32):
    """Custom type npVoltageTrapFreq based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(0, 10000),
    )


_NpVoltageTrapFreq_Type.__name__ = "Integer32"
_NpVoltageTrapFreq_Object = MibScalar
npVoltageTrapFreq = _NpVoltageTrapFreq_Object(
    (1, 3, 6, 1, 4, 1, 25728, 9000, 2, 4),
    _NpVoltageTrapFreq_Type()
)
npVoltageTrapFreq.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    npVoltageTrapFreq.setStatus("current")


class _NpVoltageTrapFreqStatus_Type(Integer32):
    """Custom type npVoltageTrapFreqStatus based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(0,
              1,
              2,
              3,
              4)
        )
    )
    namedValues = NamedValues(
        *(("bad", 2),
          ("good", 4),
          ("noVoltage", 1),
          ("sensorFailed", 0),
          ("warn", 3))
    )


_NpVoltageTrapFreqStatus_Type.__name__ = "Integer32"
_NpVoltageTrapFreqStatus_Object = MibScalar
npVoltageTrapFreqStatus = _NpVoltageTrapFreqStatus_Object(
    (1, 3, 6, 1, 4, 1, 25728, 9000, 2, 5),
    _NpVoltageTrapFreqStatus_Type()
)
npVoltageTrapFreqStatus.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    npVoltageTrapFreqStatus.setStatus("current")
_NpVoltageTrapMemo_Type = DisplayString
_NpVoltageTrapMemo_Object = MibScalar
npVoltageTrapMemo = _NpVoltageTrapMemo_Object(
    (1, 3, 6, 1, 4, 1, 25728, 9000, 2, 6),
    _NpVoltageTrapMemo_Type()
)
npVoltageTrapMemo.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    npVoltageTrapMemo.setStatus("current")
_NpVoltageTrapSagCounter_Type = Counter32
_NpVoltageTrapSagCounter_Object = MibScalar
npVoltageTrapSagCounter = _NpVoltageTrapSagCounter_Object(
    (1, 3, 6, 1, 4, 1, 25728, 9000, 2, 10),
    _NpVoltageTrapSagCounter_Type()
)
npVoltageTrapSagCounter.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    npVoltageTrapSagCounter.setStatus("current")


class _NpVoltageTrapSagStatus_Type(Integer32):
    """Custom type npVoltageTrapSagStatus based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(0,
              1,
              2,
              3,
              4,
              5)
        )
    )
    namedValues = NamedValues(
        *(("high", 2),
          ("medium", 3),
          ("noSags", 5),
          ("noVoltage", 1),
          ("sensorFailed", 0),
          ("small", 4))
    )


_NpVoltageTrapSagStatus_Type.__name__ = "Integer32"
_NpVoltageTrapSagStatus_Object = MibScalar
npVoltageTrapSagStatus = _NpVoltageTrapSagStatus_Object(
    (1, 3, 6, 1, 4, 1, 25728, 9000, 2, 11),
    _NpVoltageTrapSagStatus_Type()
)
npVoltageTrapSagStatus.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    npVoltageTrapSagStatus.setStatus("current")


class _NpVoltageTrapPeak_Type(Integer32):
    """Custom type npVoltageTrapPeak based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(0, 1000),
    )


_NpVoltageTrapPeak_Type.__name__ = "Integer32"
_NpVoltageTrapPeak_Object = MibScalar
npVoltageTrapPeak = _NpVoltageTrapPeak_Object(
    (1, 3, 6, 1, 4, 1, 25728, 9000, 2, 30),
    _NpVoltageTrapPeak_Type()
)
npVoltageTrapPeak.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    npVoltageTrapPeak.setStatus("current")


class _NpVoltageTrapPeakStatus_Type(Integer32):
    """Custom type npVoltageTrapPeakStatus based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(0,
              1,
              2,
              3)
        )
    )
    namedValues = NamedValues(
        *(("dangerous", 2),
          ("noPeaks", 3),
          ("noVoltage", 1),
          ("sensorFailed", 0))
    )


_NpVoltageTrapPeakStatus_Type.__name__ = "Integer32"
_NpVoltageTrapPeakStatus_Object = MibScalar
npVoltageTrapPeakStatus = _NpVoltageTrapPeakStatus_Object(
    (1, 3, 6, 1, 4, 1, 25728, 9000, 2, 31),
    _NpVoltageTrapPeakStatus_Type()
)
npVoltageTrapPeakStatus.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    npVoltageTrapPeakStatus.setStatus("current")

# Managed Objects groups


# Notification objects

npRelayTrapOff = NotificationType(
    (1, 3, 6, 1, 4, 1, 25728, 5500, 6, 100)
)
npRelayTrapOff.setObjects(
      *(("NETPING-MIB", "npRelayTrapN"),
        ("NETPING-MIB", "npRelayTrapMode"),
        ("NETPING-MIB", "npRelayTrapMemo"),
        ("NETPING-MIB", "npRelayTrapState"),
        ("NETPING-MIB", "npRelayTrapCmdSrc"),
        ("NETPING-MIB", "npRelayTrapDateTime"))
)
if mibBuilder.loadTexts:
    npRelayTrapOff.setStatus(
        "current"
    )

npRelayTrapOn = NotificationType(
    (1, 3, 6, 1, 4, 1, 25728, 5500, 6, 101)
)
npRelayTrapOn.setObjects(
      *(("NETPING-MIB", "npRelayTrapN"),
        ("NETPING-MIB", "npRelayTrapMode"),
        ("NETPING-MIB", "npRelayTrapMemo"),
        ("NETPING-MIB", "npRelayTrapState"),
        ("NETPING-MIB", "npRelayTrapCmdSrc"),
        ("NETPING-MIB", "npRelayTrapDateTime"))
)
if mibBuilder.loadTexts:
    npRelayTrapOn.setStatus(
        "current"
    )

npRelayTrapModeChange = NotificationType(
    (1, 3, 6, 1, 4, 1, 25728, 5500, 6, 102)
)
npRelayTrapModeChange.setObjects(
      *(("NETPING-MIB", "npRelayTrapN"),
        ("NETPING-MIB", "npRelayTrapMode"),
        ("NETPING-MIB", "npRelayTrapMemo"),
        ("NETPING-MIB", "npRelayTrapState"),
        ("NETPING-MIB", "npRelayTrapCmdSrc"),
        ("NETPING-MIB", "npRelayTrapDateTime"))
)
if mibBuilder.loadTexts:
    npRelayTrapModeChange.setStatus(
        "current"
    )

npRelayTrapReset = NotificationType(
    (1, 3, 6, 1, 4, 1, 25728, 5500, 6, 103)
)
npRelayTrapReset.setObjects(
      *(("NETPING-MIB", "npRelayTrapN"),
        ("NETPING-MIB", "npRelayTrapMode"),
        ("NETPING-MIB", "npRelayTrapMemo"),
        ("NETPING-MIB", "npRelayTrapState"),
        ("NETPING-MIB", "npRelayTrapCmdSrc"),
        ("NETPING-MIB", "npRelayTrapDateTime"))
)
if mibBuilder.loadTexts:
    npRelayTrapReset.setStatus(
        "current"
    )

npRelayTrapAllChannels = NotificationType(
    (1, 3, 6, 1, 4, 1, 25728, 5500, 6, 127, 99)
)
npRelayTrapAllChannels.setObjects(
      *(("NETPING-MIB", "npRelayTrapN"),
        ("NETPING-MIB", "npRelayTrapMode"),
        ("NETPING-MIB", "npRelayTrapMemo"),
        ("NETPING-MIB", "npRelayTrapState"),
        ("NETPING-MIB", "npRelayTrapCmdSrc"),
        ("NETPING-MIB", "npRelayTrapDateTime"))
)
if mibBuilder.loadTexts:
    npRelayTrapAllChannels.setStatus(
        "current"
    )

npExtRelayTrapOff = NotificationType(
    (1, 3, 6, 1, 4, 1, 25728, 5600, 6, 100)
)
npExtRelayTrapOff.setObjects(
      *(("NETPING-MIB", "npExtRelayTrapN"),
        ("NETPING-MIB", "npExtRelayTrapMode"),
        ("NETPING-MIB", "npExtRelayTrapMemo"),
        ("NETPING-MIB", "npExtRelayTrapState"),
        ("NETPING-MIB", "npExtRelayTrapCmdSrc"),
        ("NETPING-MIB", "npExtRelayTrapDateTime"))
)
if mibBuilder.loadTexts:
    npExtRelayTrapOff.setStatus(
        "current"
    )

npExtRelayTrapOn = NotificationType(
    (1, 3, 6, 1, 4, 1, 25728, 5600, 6, 101)
)
npExtRelayTrapOn.setObjects(
      *(("NETPING-MIB", "npExtRelayTrapN"),
        ("NETPING-MIB", "npExtRelayTrapMode"),
        ("NETPING-MIB", "npExtRelayTrapMemo"),
        ("NETPING-MIB", "npExtRelayTrapState"),
        ("NETPING-MIB", "npExtRelayTrapCmdSrc"),
        ("NETPING-MIB", "npExtRelayTrapDateTime"))
)
if mibBuilder.loadTexts:
    npExtRelayTrapOn.setStatus(
        "current"
    )

npExtRelayTrapModeChange = NotificationType(
    (1, 3, 6, 1, 4, 1, 25728, 5600, 6, 102)
)
npExtRelayTrapModeChange.setObjects(
      *(("NETPING-MIB", "npExtRelayTrapN"),
        ("NETPING-MIB", "npExtRelayTrapMode"),
        ("NETPING-MIB", "npExtRelayTrapMemo"),
        ("NETPING-MIB", "npExtRelayTrapState"),
        ("NETPING-MIB", "npExtRelayTrapCmdSrc"),
        ("NETPING-MIB", "npExtRelayTrapDateTime"))
)
if mibBuilder.loadTexts:
    npExtRelayTrapModeChange.setStatus(
        "current"
    )

npExtRelayTrapReset = NotificationType(
    (1, 3, 6, 1, 4, 1, 25728, 5600, 6, 103)
)
npExtRelayTrapReset.setObjects(
      *(("NETPING-MIB", "npExtRelayTrapN"),
        ("NETPING-MIB", "npExtRelayTrapMode"),
        ("NETPING-MIB", "npExtRelayTrapMemo"),
        ("NETPING-MIB", "npExtRelayTrapState"),
        ("NETPING-MIB", "npExtRelayTrapCmdSrc"),
        ("NETPING-MIB", "npExtRelayTrapDateTime"))
)
if mibBuilder.loadTexts:
    npExtRelayTrapReset.setStatus(
        "current"
    )

npExtRelayTrapAllChannels = NotificationType(
    (1, 3, 6, 1, 4, 1, 25728, 5600, 6, 127, 99)
)
npExtRelayTrapAllChannels.setObjects(
      *(("NETPING-MIB", "npExtRelayTrapN"),
        ("NETPING-MIB", "npExtRelayTrapMode"),
        ("NETPING-MIB", "npExtRelayTrapMemo"),
        ("NETPING-MIB", "npExtRelayTrapState"),
        ("NETPING-MIB", "npExtRelayTrapCmdSrc"),
        ("NETPING-MIB", "npExtRelayTrapDateTime"))
)
if mibBuilder.loadTexts:
    npExtRelayTrapAllChannels.setStatus(
        "current"
    )

npPwrWdogTrapReset = NotificationType(
    (1, 3, 6, 1, 4, 1, 25728, 5800, 6, 100)
)
npPwrWdogTrapReset.setObjects(
      *(("NETPING-MIB", "npPwrWdogTrapN"),
        ("NETPING-MIB", "npPwrWdogTrapMemo"),
        ("NETPING-MIB", "npPwrWdogTrapFailBitmap"))
)
if mibBuilder.loadTexts:
    npPwrWdogTrapReset.setStatus(
        "current"
    )

npPwrWdogTrapSuspended = NotificationType(
    (1, 3, 6, 1, 4, 1, 25728, 5800, 6, 101)
)
npPwrWdogTrapSuspended.setObjects(
      *(("NETPING-MIB", "npPwrWdogTrapN"),
        ("NETPING-MIB", "npPwrWdogTrapMemo"))
)
if mibBuilder.loadTexts:
    npPwrWdogTrapSuspended.setStatus(
        "current"
    )

npPwrWdogTrapResumed = NotificationType(
    (1, 3, 6, 1, 4, 1, 25728, 5800, 6, 102)
)
npPwrWdogTrapResumed.setObjects(
      *(("NETPING-MIB", "npPwrWdogTrapN"),
        ("NETPING-MIB", "npPwrWdogTrapMemo"))
)
if mibBuilder.loadTexts:
    npPwrWdogTrapResumed.setStatus(
        "current"
    )

npOwInputAnalogTrap = NotificationType(
    (1, 3, 6, 1, 4, 1, 25728, 8200, 2, 0, 1)
)
npOwInputAnalogTrap.setObjects(
      *(("NETPING-MIB", "npOwInputAnalogTrapSensorN"),
        ("NETPING-MIB", "npOwInputAnalogTrapStatus"),
        ("NETPING-MIB", "npOwInputAnalogTrapCurrent"),
        ("NETPING-MIB", "npOwInputAnalogTrapVoltage"),
        ("NETPING-MIB", "npOwInputAnalogTrapResistance"),
        ("NETPING-MIB", "npOwInputAnalogTrapMemo"),
        ("NETPING-MIB", "npOwInputAnalogTrapPower"),
        ("NETPING-MIB", "npOwInputAnalogTrapWorkRangeHigh"),
        ("NETPING-MIB", "npOwInputAnalogTrapSafeRangeHigh"),
        ("NETPING-MIB", "npOwInputAnalogTrapSafeRangeLow"),
        ("NETPING-MIB", "npOwInputAnalogTrapWorkRangeLow"))
)
if mibBuilder.loadTexts:
    npOwInputAnalogTrap.setStatus(
        "current"
    )

npRelHumTrapFail = NotificationType(
    (1, 3, 6, 1, 4, 1, 25728, 8400, 6, 100)
)
npRelHumTrapFail.setObjects(
      *(("NETPING-MIB", "npRelHumTrapDataN"),
        ("NETPING-MIB", "npRelHumTrapDataStatus"),
        ("NETPING-MIB", "npRelHumTrapDataValue"),
        ("NETPING-MIB", "npRelHumTrapDataMemo"),
        ("NETPING-MIB", "npRelHumTrapDataSafeRangeHigh"),
        ("NETPING-MIB", "npRelHumTrapDataSafeRangeLow"))
)
if mibBuilder.loadTexts:
    npRelHumTrapFail.setStatus(
        "current"
    )

npRelHumTrapBelowSafe = NotificationType(
    (1, 3, 6, 1, 4, 1, 25728, 8400, 6, 101)
)
npRelHumTrapBelowSafe.setObjects(
      *(("NETPING-MIB", "npRelHumTrapDataN"),
        ("NETPING-MIB", "npRelHumTrapDataStatus"),
        ("NETPING-MIB", "npRelHumTrapDataValue"),
        ("NETPING-MIB", "npRelHumTrapDataMemo"),
        ("NETPING-MIB", "npRelHumTrapDataSafeRangeHigh"),
        ("NETPING-MIB", "npRelHumTrapDataSafeRangeLow"))
)
if mibBuilder.loadTexts:
    npRelHumTrapBelowSafe.setStatus(
        "current"
    )

npRelHumTrapSafe = NotificationType(
    (1, 3, 6, 1, 4, 1, 25728, 8400, 6, 102)
)
npRelHumTrapSafe.setObjects(
      *(("NETPING-MIB", "npRelHumTrapDataN"),
        ("NETPING-MIB", "npRelHumTrapDataStatus"),
        ("NETPING-MIB", "npRelHumTrapDataValue"),
        ("NETPING-MIB", "npRelHumTrapDataMemo"),
        ("NETPING-MIB", "npRelHumTrapDataSafeRangeHigh"),
        ("NETPING-MIB", "npRelHumTrapDataSafeRangeLow"))
)
if mibBuilder.loadTexts:
    npRelHumTrapSafe.setStatus(
        "current"
    )

npRelHumTrapAboveSafe = NotificationType(
    (1, 3, 6, 1, 4, 1, 25728, 8400, 6, 103)
)
npRelHumTrapAboveSafe.setObjects(
      *(("NETPING-MIB", "npRelHumTrapDataN"),
        ("NETPING-MIB", "npRelHumTrapDataStatus"),
        ("NETPING-MIB", "npRelHumTrapDataValue"),
        ("NETPING-MIB", "npRelHumTrapDataMemo"),
        ("NETPING-MIB", "npRelHumTrapDataSafeRangeHigh"),
        ("NETPING-MIB", "npRelHumTrapDataSafeRangeLow"))
)
if mibBuilder.loadTexts:
    npRelHumTrapAboveSafe.setStatus(
        "current"
    )

npRelHumTrapAllChannels = NotificationType(
    (1, 3, 6, 1, 4, 1, 25728, 8400, 6, 127, 99)
)
npRelHumTrapAllChannels.setObjects(
      *(("NETPING-MIB", "npRelHumTrapDataN"),
        ("NETPING-MIB", "npRelHumTrapDataStatus"),
        ("NETPING-MIB", "npRelHumTrapDataValue"),
        ("NETPING-MIB", "npRelHumTrapDataMemo"),
        ("NETPING-MIB", "npRelHumTrapDataSafeRangeHigh"),
        ("NETPING-MIB", "npRelHumTrapDataSafeRangeLow"))
)
if mibBuilder.loadTexts:
    npRelHumTrapAllChannels.setStatus(
        "current"
    )

npRelHumTrapTempFail = NotificationType(
    (1, 3, 6, 1, 4, 1, 25728, 8400, 7, 100)
)
npRelHumTrapTempFail.setObjects(
      *(("NETPING-MIB", "npRelHumTrapDataN"),
        ("NETPING-MIB", "npRelHumTrapDataStatus"),
        ("NETPING-MIB", "npRelHumTrapDataValue"),
        ("NETPING-MIB", "npRelHumTrapDataMemo"),
        ("NETPING-MIB", "npRelHumTrapDataSafeRangeHigh"),
        ("NETPING-MIB", "npRelHumTrapDataSafeRangeLow"))
)
if mibBuilder.loadTexts:
    npRelHumTrapTempFail.setStatus(
        "current"
    )

npRelHumTrapTempBelowSafe = NotificationType(
    (1, 3, 6, 1, 4, 1, 25728, 8400, 7, 101)
)
npRelHumTrapTempBelowSafe.setObjects(
      *(("NETPING-MIB", "npRelHumTrapDataN"),
        ("NETPING-MIB", "npRelHumTrapDataStatus"),
        ("NETPING-MIB", "npRelHumTrapDataValue"),
        ("NETPING-MIB", "npRelHumTrapDataMemo"),
        ("NETPING-MIB", "npRelHumTrapDataSafeRangeHigh"),
        ("NETPING-MIB", "npRelHumTrapDataSafeRangeLow"))
)
if mibBuilder.loadTexts:
    npRelHumTrapTempBelowSafe.setStatus(
        "current"
    )

npRelHumTrapTempSafe = NotificationType(
    (1, 3, 6, 1, 4, 1, 25728, 8400, 7, 102)
)
npRelHumTrapTempSafe.setObjects(
      *(("NETPING-MIB", "npRelHumTrapDataN"),
        ("NETPING-MIB", "npRelHumTrapDataStatus"),
        ("NETPING-MIB", "npRelHumTrapDataValue"),
        ("NETPING-MIB", "npRelHumTrapDataMemo"),
        ("NETPING-MIB", "npRelHumTrapDataSafeRangeHigh"),
        ("NETPING-MIB", "npRelHumTrapDataSafeRangeLow"))
)
if mibBuilder.loadTexts:
    npRelHumTrapTempSafe.setStatus(
        "current"
    )

npRelHumTrapTempAboveSafe = NotificationType(
    (1, 3, 6, 1, 4, 1, 25728, 8400, 7, 103)
)
npRelHumTrapTempAboveSafe.setObjects(
      *(("NETPING-MIB", "npRelHumTrapDataN"),
        ("NETPING-MIB", "npRelHumTrapDataStatus"),
        ("NETPING-MIB", "npRelHumTrapDataValue"),
        ("NETPING-MIB", "npRelHumTrapDataMemo"),
        ("NETPING-MIB", "npRelHumTrapDataSafeRangeHigh"),
        ("NETPING-MIB", "npRelHumTrapDataSafeRangeLow"))
)
if mibBuilder.loadTexts:
    npRelHumTrapTempAboveSafe.setStatus(
        "current"
    )

npRelHumTrapTempAllChannels = NotificationType(
    (1, 3, 6, 1, 4, 1, 25728, 8400, 7, 127, 99)
)
npRelHumTrapTempAllChannels.setObjects(
      *(("NETPING-MIB", "npRelHumTrapDataN"),
        ("NETPING-MIB", "npRelHumTrapDataStatus"),
        ("NETPING-MIB", "npRelHumTrapDataValue"),
        ("NETPING-MIB", "npRelHumTrapDataMemo"),
        ("NETPING-MIB", "npRelHumTrapDataSafeRangeHigh"),
        ("NETPING-MIB", "npRelHumTrapDataSafeRangeLow"))
)
if mibBuilder.loadTexts:
    npRelHumTrapTempAllChannels.setStatus(
        "current"
    )

npThermoTrap = NotificationType(
    (1, 3, 6, 1, 4, 1, 25728, 8800, 2, 0, 1)
)
npThermoTrap.setObjects(
      *(("NETPING-MIB", "npThermoTrapSensorN"),
        ("NETPING-MIB", "npThermoTrapValue"),
        ("NETPING-MIB", "npThermoTrapStatus"),
        ("NETPING-MIB", "npThermoTrapLow"),
        ("NETPING-MIB", "npThermoTrapHigh"),
        ("NETPING-MIB", "npThermoTrapMemo"))
)
if mibBuilder.loadTexts:
    npThermoTrap.setStatus(
        "current"
    )

npIoTrap = NotificationType(
    (1, 3, 6, 1, 4, 1, 25728, 8900, 2, 0, 1)
)
npIoTrap.setObjects(
      *(("NETPING-MIB", "npIoTrapLineN"),
        ("NETPING-MIB", "npIoTrapLevelIn"),
        ("NETPING-MIB", "npIoTrapMemo"),
        ("NETPING-MIB", "npIoTrapLevelLegend"))
)
if mibBuilder.loadTexts:
    npIoTrap.setStatus(
        "current"
    )

npVoltageTrap = NotificationType(
    (1, 3, 6, 1, 4, 1, 25728, 9000, 2, 0, 1)
)
npVoltageTrap.setObjects(
      *(("NETPING-MIB", "npVoltageTrapN"),
        ("NETPING-MIB", "npVoltageTrapRMS"),
        ("NETPING-MIB", "npVoltageTrapStatus"),
        ("NETPING-MIB", "npVoltageTrapFreq"),
        ("NETPING-MIB", "npVoltageTrapFreqStatus"),
        ("NETPING-MIB", "npVoltageTrapMemo"),
        ("NETPING-MIB", "npVoltageTrapSagCounter"),
        ("NETPING-MIB", "npVoltageTrapSagStatus"),
        ("NETPING-MIB", "npVoltageTrapPeakStatus"))
)
if mibBuilder.loadTexts:
    npVoltageTrap.setStatus(
        "current"
    )


# Notifications groups


# Agent capabilities


# Module compliance


# Export all MIB objects to the MIB builder

mibBuilder.exportSymbols(
    "NETPING-MIB",
    **{"FixedPoint1000": FixedPoint1000,
       "lightcom": lightcom,
       "netPingServerSolutionV5noGsm": netPingServerSolutionV5noGsm,
       "npReboot": npReboot,
       "npSoftReboot": npSoftReboot,
       "npResetStack": npResetStack,
       "npForcedReboot": npForcedReboot,
       "npRelay": npRelay,
       "npRelayTrapData": npRelayTrapData,
       "npRelayTrapN": npRelayTrapN,
       "npRelayTrapMode": npRelayTrapMode,
       "npRelayTrapMemo": npRelayTrapMemo,
       "npRelayTrapState": npRelayTrapState,
       "npRelayTrapCmdSrc": npRelayTrapCmdSrc,
       "npRelayTrapDateTime": npRelayTrapDateTime,
       "npRelayTable": npRelayTable,
       "npRelayEntry": npRelayEntry,
       "npRelayN": npRelayN,
       "npRelayMode": npRelayMode,
       "npRelayStartReset": npRelayStartReset,
       "npRelayMemo": npRelayMemo,
       "npRelayFlip": npRelayFlip,
       "npRelayState": npRelayState,
       "npRelayTrap": npRelayTrap,
       "npRelayTrapOff": npRelayTrapOff,
       "npRelayTrapOn": npRelayTrapOn,
       "npRelayTrapModeChange": npRelayTrapModeChange,
       "npRelayTrapReset": npRelayTrapReset,
       "npRelayTrapAllEvents": npRelayTrapAllEvents,
       "npRelayTrapAllChannels": npRelayTrapAllChannels,
       "npExtRelay": npExtRelay,
       "npExtRelayTrapData": npExtRelayTrapData,
       "npExtRelayTrapN": npExtRelayTrapN,
       "npExtRelayTrapMode": npExtRelayTrapMode,
       "npExtRelayTrapMemo": npExtRelayTrapMemo,
       "npExtRelayTrapState": npExtRelayTrapState,
       "npExtRelayTrapCmdSrc": npExtRelayTrapCmdSrc,
       "npExtRelayTrapDateTime": npExtRelayTrapDateTime,
       "npExtRelayTable": npExtRelayTable,
       "npExtRelayEntry": npExtRelayEntry,
       "npExtRelayN": npExtRelayN,
       "npExtRelayMode": npExtRelayMode,
       "npExtRelayStartReset": npExtRelayStartReset,
       "npExtRelayMemo": npExtRelayMemo,
       "npExtRelayFlip": npExtRelayFlip,
       "npExtRelayState": npExtRelayState,
       "npExtRelayTrap": npExtRelayTrap,
       "npExtRelayTrapOff": npExtRelayTrapOff,
       "npExtRelayTrapOn": npExtRelayTrapOn,
       "npExtRelayTrapModeChange": npExtRelayTrapModeChange,
       "npExtRelayTrapReset": npExtRelayTrapReset,
       "npExtRelayTrapAllEvents": npExtRelayTrapAllEvents,
       "npExtRelayTrapAllChannels": npExtRelayTrapAllChannels,
       "npPwrWdog": npPwrWdog,
       "npPwrWdogTrapData": npPwrWdogTrapData,
       "npPwrWdogTrapN": npPwrWdogTrapN,
       "npPwrWdogTrapMemo": npPwrWdogTrapMemo,
       "npPwrWdogTrapFailBitmap": npPwrWdogTrapFailBitmap,
       "npPwrWdogTable": npPwrWdogTable,
       "npPwrWdogEntry": npPwrWdogEntry,
       "npPwrWdogChannelN": npPwrWdogChannelN,
       "npPwrWdogResetsCounter": npPwrWdogResetsCounter,
       "npPwrWdogRepeatingResetsCounter": npPwrWdogRepeatingResetsCounter,
       "npPwrWdogMemo": npPwrWdogMemo,
       "npPwrWdogTrap": npPwrWdogTrap,
       "npPwrWdogTrapReset": npPwrWdogTrapReset,
       "npPwrWdogTrapSuspended": npPwrWdogTrapSuspended,
       "npPwrWdogTrapResumed": npPwrWdogTrapResumed,
       "npOwInputAnalog": npOwInputAnalog,
       "npOwInputAnalogTable": npOwInputAnalogTable,
       "npOwInputAnalogEntry": npOwInputAnalogEntry,
       "npOwInputAnalogSensorN": npOwInputAnalogSensorN,
       "npOwInputAnalogStatus": npOwInputAnalogStatus,
       "npOwInputAnalogCurrent": npOwInputAnalogCurrent,
       "npOwInputAnalogVoltage": npOwInputAnalogVoltage,
       "npOwInputAnalogResistance": npOwInputAnalogResistance,
       "npOwInputAnalogMemo": npOwInputAnalogMemo,
       "npOwInputAnalogPower": npOwInputAnalogPower,
       "npOwInputAnalogReset": npOwInputAnalogReset,
       "npOwInputAnalogWorkRangeHigh": npOwInputAnalogWorkRangeHigh,
       "npOwInputAnalogSafeRangeHigh": npOwInputAnalogSafeRangeHigh,
       "npOwInputAnalogSafeRangeLow": npOwInputAnalogSafeRangeLow,
       "npOwInputAnalogWorkRangeLow": npOwInputAnalogWorkRangeLow,
       "npOwInputAnalogTraps": npOwInputAnalogTraps,
       "npOwInputAnalogTrapPrefix": npOwInputAnalogTrapPrefix,
       "npOwInputAnalogTrap": npOwInputAnalogTrap,
       "npOwInputAnalogTrapSensorN": npOwInputAnalogTrapSensorN,
       "npOwInputAnalogTrapStatus": npOwInputAnalogTrapStatus,
       "npOwInputAnalogTrapCurrent": npOwInputAnalogTrapCurrent,
       "npOwInputAnalogTrapVoltage": npOwInputAnalogTrapVoltage,
       "npOwInputAnalogTrapResistance": npOwInputAnalogTrapResistance,
       "npOwInputAnalogTrapMemo": npOwInputAnalogTrapMemo,
       "npOwInputAnalogTrapPower": npOwInputAnalogTrapPower,
       "npOwInputAnalogTrapWorkRangeHigh": npOwInputAnalogTrapWorkRangeHigh,
       "npOwInputAnalogTrapSafeRangeHigh": npOwInputAnalogTrapSafeRangeHigh,
       "npOwInputAnalogTrapSafeRangeLow": npOwInputAnalogTrapSafeRangeLow,
       "npOwInputAnalogTrapWorkRangeLow": npOwInputAnalogTrapWorkRangeLow,
       "npRelHumidity": npRelHumidity,
       "npRelHumTable": npRelHumTable,
       "npRelHumEntry": npRelHumEntry,
       "npRelHumN": npRelHumN,
       "npRelHumValue": npRelHumValue,
       "npRelHumStatus": npRelHumStatus,
       "npRelHumTempValue": npRelHumTempValue,
       "npRelHumTempStatus": npRelHumTempStatus,
       "npRelHumMemo": npRelHumMemo,
       "npRelHumSafeRangeHigh": npRelHumSafeRangeHigh,
       "npRelHumSafeRangeLow": npRelHumSafeRangeLow,
       "npRelHumTempSafeRangeHigh": npRelHumTempSafeRangeHigh,
       "npRelHumTempSafeRangeLow": npRelHumTempSafeRangeLow,
       "npRelHumTrapData": npRelHumTrapData,
       "npRelHumTrapDataN": npRelHumTrapDataN,
       "npRelHumTrapDataValue": npRelHumTrapDataValue,
       "npRelHumTrapDataStatus": npRelHumTrapDataStatus,
       "npRelHumTrapDataMemo": npRelHumTrapDataMemo,
       "npRelHumTrapDataSafeRangeHigh": npRelHumTrapDataSafeRangeHigh,
       "npRelHumTrapDataSafeRangeLow": npRelHumTrapDataSafeRangeLow,
       "npRelHumTrap": npRelHumTrap,
       "npRelHumTrapFail": npRelHumTrapFail,
       "npRelHumTrapBelowSafe": npRelHumTrapBelowSafe,
       "npRelHumTrapSafe": npRelHumTrapSafe,
       "npRelHumTrapAboveSafe": npRelHumTrapAboveSafe,
       "npRelHumTrapAllEvents": npRelHumTrapAllEvents,
       "npRelHumTrapAllChannels": npRelHumTrapAllChannels,
       "npRelHumTrapTemp": npRelHumTrapTemp,
       "npRelHumTrapTempFail": npRelHumTrapTempFail,
       "npRelHumTrapTempBelowSafe": npRelHumTrapTempBelowSafe,
       "npRelHumTrapTempSafe": npRelHumTrapTempSafe,
       "npRelHumTrapTempAboveSafe": npRelHumTrapTempAboveSafe,
       "npRelHumTrapTempAllEvents": npRelHumTrapTempAllEvents,
       "npRelHumTrapTempAllChannels": npRelHumTrapTempAllChannels,
       "npThermo": npThermo,
       "npThermoTable": npThermoTable,
       "npThermoEntry": npThermoEntry,
       "npThermoSensorN": npThermoSensorN,
       "npThermoValue": npThermoValue,
       "npThermoStatus": npThermoStatus,
       "npThermoLow": npThermoLow,
       "npThermoHigh": npThermoHigh,
       "npThermoMemo": npThermoMemo,
       "npThermoValuePrecise": npThermoValuePrecise,
       "npThermoTraps": npThermoTraps,
       "npThermoTrapPrefix": npThermoTrapPrefix,
       "npThermoTrap": npThermoTrap,
       "npThermoTrapSensorN": npThermoTrapSensorN,
       "npThermoTrapValue": npThermoTrapValue,
       "npThermoTrapStatus": npThermoTrapStatus,
       "npThermoTrapLow": npThermoTrapLow,
       "npThermoTrapHigh": npThermoTrapHigh,
       "npThermoTrapMemo": npThermoTrapMemo,
       "npIo": npIo,
       "npIoTable": npIoTable,
       "npIoEntry": npIoEntry,
       "npIoLineN": npIoLineN,
       "npIoLevelIn": npIoLevelIn,
       "npIoLevelOut": npIoLevelOut,
       "npIoMemo": npIoMemo,
       "npIoPulseCounter": npIoPulseCounter,
       "npIoSinglePulseDuration": npIoSinglePulseDuration,
       "npIoSinglePulseStart": npIoSinglePulseStart,
       "npIoTraps": npIoTraps,
       "npIoTrapPrefix": npIoTrapPrefix,
       "npIoTrap": npIoTrap,
       "npIoTrapLineN": npIoTrapLineN,
       "npIoTrapLevelIn": npIoTrapLevelIn,
       "npIoTrapMemo": npIoTrapMemo,
       "npIoTrapLevelLegend": npIoTrapLevelLegend,
       "npVoltage": npVoltage,
       "npVoltageTable": npVoltageTable,
       "npVoltageEntry": npVoltageEntry,
       "npVoltageN": npVoltageN,
       "npVoltageRMS": npVoltageRMS,
       "npVoltageStatus": npVoltageStatus,
       "npVoltageFreq": npVoltageFreq,
       "npVoltageFreqStatus": npVoltageFreqStatus,
       "npVoltageMemo": npVoltageMemo,
       "npVoltageSagCounter": npVoltageSagCounter,
       "npVoltageSagStatus": npVoltageSagStatus,
       "npVoltageSagSmallThreshold": npVoltageSagSmallThreshold,
       "npVoltageSagMediumThreshold": npVoltageSagMediumThreshold,
       "npVoltageSagBigThreshold": npVoltageSagBigThreshold,
       "npVoltageStandard": npVoltageStandard,
       "npVoltagePeak": npVoltagePeak,
       "npVoltagePeakStatus": npVoltagePeakStatus,
       "npVoltageTraps": npVoltageTraps,
       "npVoltageTrapPrefix": npVoltageTrapPrefix,
       "npVoltageTrap": npVoltageTrap,
       "npVoltageTrapN": npVoltageTrapN,
       "npVoltageTrapRMS": npVoltageTrapRMS,
       "npVoltageTrapStatus": npVoltageTrapStatus,
       "npVoltageTrapFreq": npVoltageTrapFreq,
       "npVoltageTrapFreqStatus": npVoltageTrapFreqStatus,
       "npVoltageTrapMemo": npVoltageTrapMemo,
       "npVoltageTrapSagCounter": npVoltageTrapSagCounter,
       "npVoltageTrapSagStatus": npVoltageTrapSagStatus,
       "npVoltageTrapPeak": npVoltageTrapPeak,
       "npVoltageTrapPeakStatus": npVoltageTrapPeakStatus}
)
